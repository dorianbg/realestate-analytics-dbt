{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.8", "generated_at": "2024-03-03T13:52:20.530138Z", "invocation_id": "df606062-d292-46db-8116-4bd5f250a98e", "env": {}, "project_name": "property_cro", "project_id": "3aeaf0d45d99673d97ead01e4591b9b7", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "postgres"}, "nodes": {"model.property_cro.3vw_avg_ask_px_per_loc_size_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats", "name": "3vw_avg_ask_px_per_loc_size_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/3vw_avg_ask_px_per_loc_size_sales_flats.sql", "original_file_path": "models/sales_flats/3vw_avg_ask_px_per_loc_size_sales_flats.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_flats", "fqn": ["property_cro", "sales_flats", "3vw_avg_ask_px_per_loc_size_sales_flats"], "alias": "vw_avg_ask_px_per_loc_size", "checksum": {"name": "sha256", "checksum": "44e76bc2e991865965c2c69609bf3e4ea92188fdc41bab21e197167fd7928d15"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc_size", "schema": "sales_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats", "alias": "vw_avg_ask_px_per_loc_size"}, "created_at": 1709473941.3105202, "relation_name": "\"property_cro\".\"analytics_sales_flats\".\"vw_avg_ask_px_per_loc_size\"", "raw_code": "{{ config(materialized='view', schema='sales_flats', alias='vw_avg_ask_px_per_loc_size') }}\n\n{{ avg_px_per_loc_and_size_macro('2mv_price_history_sales_flats', '270 DAY', '30000') }}", "language": "sql", "refs": [{"name": "2mv_price_history_sales_flats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_and_size_macro"], "nodes": ["model.property_cro.2mv_price_history_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/3vw_avg_ask_px_per_loc_size_sales_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct \n\tlocation,\n    FLOOR(size / 20) * 20 as size,\n\tcount(distinct ad_id) area_total_ads,\n\tavg(price/size) as area_average\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_price_history\"\nWHERE last_seen >  now()::date - INTERVAL '270 DAY'\n    and price > 30000\ngroup by location, FLOOR(size / 20)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.2mv_price_history_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats", "name": "2mv_price_history_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/2mv_price_history_sales_flats.sql", "original_file_path": "models/sales_flats/2mv_price_history_sales_flats.sql", "unique_id": "model.property_cro.2mv_price_history_sales_flats", "fqn": ["property_cro", "sales_flats", "2mv_price_history_sales_flats"], "alias": "mv_price_history", "checksum": {"name": "sha256", "checksum": "07affca5f473ba20286f89037d3e0a911cf0c5a981c8db0d29b0d754aa8242dd"}, "config": {"enabled": true, "alias": "mv_price_history", "schema": "sales_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_flats", "alias": "mv_price_history"}, "created_at": 1709473941.32784, "relation_name": "\"property_cro\".\"analytics_sales_flats\".\"mv_price_history\"", "raw_code": "{{ config(materialized='table', schema='sales_flats', alias='mv_price_history') }}\n\n{{ price_history_macro('staging', 'sales_flats', '1vw_last_ad_time_sales_flats', '12000', '1000000', '300', '10000') }}", "language": "sql", "refs": [{"name": "1vw_last_ad_time_sales_flats", "package": null, "version": null}], "sources": [["staging", "sales_flats"], ["staging", "sales_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.price_history_macro"], "nodes": ["source.property_cro.staging.sales_flats", "model.property_cro.1vw_last_ad_time_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/2mv_price_history_sales_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nwith t as (\n    select\n\t\tlas.ad_id,\n        t.last_seen,\n        t.first_seen,\n        price,\n        seen_date,\n        t.days_on_the_market,\n        t.status,\n        first_value(price) over (partition by las.ad_id order by seen_date desc range between UNBOUNDED preceding and unbounded following) as current_price,\n\t\tlast_value(price) over (partition by las.ad_id order by seen_date desc range between UNBOUNDED preceding and unbounded following) as first_price\n\tfrom \"property_cro\".\"staging\".\"sales_flats\" las\n    join \"property_cro\".\"analytics_sales_flats\".\"vw_last_ad_time\" as t\n        on las.ad_id = t.ad_id\n    where las.price between 12000 and 1000000\n),\nad_price_history as (\n    select\n        ad_id,\n        last_seen,\n        first_seen,\n        current_price,\n        first_price,\n        days_on_the_market,\n        status,\n        min(price) filter ( where seen_date <= t.last_seen - interval '60 day') as price_60,\n        min(price) filter ( where seen_date between t.last_seen - interval '60 day' and t.last_seen - interval '45 day') as price_45,\n        min(price) filter ( where seen_date between t.last_seen - interval '45 day' and t.last_seen - interval '30 day') as price_30,\n        min(price) filter ( where seen_date between t.last_seen - interval '30 day' and t.last_seen - interval '15 day') as price_15,\n        min(price) filter ( where seen_date between t.last_seen - interval '15 day' and t.last_seen - interval '7 day') as price_7,\n        min(price) filter ( where seen_date between t.last_seen - interval '7 day' and t.last_seen - interval '3 day') as price_3,\n        count(ad_id) as num_seen,\n        max(seen_date) as latest_seen_date\n    from t\n    group by ad_id, last_seen, first_seen, current_price, first_price, days_on_the_market, status\n), last_ad as (\n    select\n        ad.ad_id,\n        ad.seen_date,\n        ad.location,\n        ad.title,\n        ad.link,\n        ad.flat_type,\n        ad.floor,\n        ad.size,\n        ad.price\n    from (select row_number() over (partition by ad_id order by seen_time desc) as rown,\n                 *\n          from \"property_cro\".\"staging\".\"sales_flats\") ad\n    where rown = 1\n)\nselect\n    ad.location,\n    ad.title,\n    ad.link,\n    ad.flat_type,\n    ad.floor,\n    ad.size,\n    ad.price,\n    aph.ad_id,\n    aph.last_seen,\n    aph.first_seen,\n    aph.current_price,\n    aph.first_price,\n    aph.price_60,\n    aph.price_45,\n    aph.price_30,\n    aph.price_15,\n    aph.price_7,\n    aph.price_3,\n    aph.num_seen,\n    aph.latest_seen_date,\n    aph.days_on_the_market,\n    aph.status\nfrom ad_price_history aph\njoin last_ad ad\n\ton aph.ad_id = ad.ad_id\n\tand aph.last_seen = ad.seen_date\nwhere (ad.price/ad.size) between 300 and 10000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.4mv_enriched_ad_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats", "name": "4mv_enriched_ad_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/4mv_enriched_ad_sales_flats.sql", "original_file_path": "models/sales_flats/4mv_enriched_ad_sales_flats.sql", "unique_id": "model.property_cro.4mv_enriched_ad_sales_flats", "fqn": ["property_cro", "sales_flats", "4mv_enriched_ad_sales_flats"], "alias": "mv_enriched_ad", "checksum": {"name": "sha256", "checksum": "be296c2c6be42ae5c038dcca29196acdbd8ee506dee20c46785af604687ac67c"}, "config": {"enabled": true, "alias": "mv_enriched_ad", "schema": "sales_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_flats", "alias": "mv_enriched_ad"}, "created_at": 1709473941.333334, "relation_name": "\"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"", "raw_code": "{{ config(materialized='table', schema='sales_flats', alias='mv_enriched_ad') }}\n\nselect\n    {{ enriched_ads_base_col_select_macro('0') }}\n    sd.apartment_type,\n    case\n        when RIGHT(sd.total_number_of_floors_in_building, 1) like '.'\n            then SUBSTR(sd.total_number_of_floors_in_building, 1, LENGTH(sd.total_number_of_floors_in_building)-1)::integer\n        when lower(sd.total_number_of_floors_in_building) like '%prizemlje%'\n            then 1\n        when sd.total_number_of_floors_in_building like '25+'\n            then 25\n        else sd.total_number_of_floors_in_building::integer\n    end as total_number_of_floors_in_building\nfrom {{ ref('2mv_price_history_sales_flats') }} s\njoin {{ ref('3vw_avg_ask_px_per_loc_sales_flats') }}  a on s.location = a.location\nleft join {{ source('staging', 'sale_flat_desc') }} sd on s.ad_id = sd.ad_id\nleft join {{ ref('3vw_avg_ask_px_per_loc_size_sales_flats') }} a2 on s.location = a2.location and FLOOR(s.size / 20) * 20 = a2.size\nleft join {{ ref('3vw_avg_ask_px_per_loc_year_size_sales_flats') }} a3 on s.location = a3.location and FLOOR(s.size / 20) * 20 = a3.size and FLOOR(sd.year_built / 20) * 20 = a3.year_range", "language": "sql", "refs": [{"name": "2mv_price_history_sales_flats", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_sales_flats", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_size_sales_flats", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_year_size_sales_flats", "package": null, "version": null}], "sources": [["staging", "sale_flat_desc"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.enriched_ads_base_col_select_macro"], "nodes": ["source.property_cro.staging.sale_flat_desc", "model.property_cro.2mv_price_history_sales_flats", "model.property_cro.3vw_avg_ask_px_per_loc_sales_flats", "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_flats", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/4mv_enriched_ad_sales_flats.sql", "compiled": true, "compiled_code": "\n\nselect\n    \n    s.location,\n    s.title,\n    s.link,\n    s.flat_type,\n    s.floor,\n    s.size,\n    s.price,\n    s.first_price,\n    s.current_price,\n    s.num_seen,\n    round((s.price/s.size)::numeric, 0) as price_m2,\n    round(a.area_average::numeric, 0) as area_price_m2,\n    round((100 * (a.area_average - s.price/s.size) / a.area_average)::numeric, 1) as area_discount,\n    round(a2.area_average::numeric, 0) as area_sized_price_m2,\n    round((100 * (a2.area_average - s.price/s.size) / a2.area_average)::numeric, 1) as area_sized_discount,\n    round(a3.area_average::numeric, 0) as area_aged_sized_price_m2,\n    round((100 * (a3.area_average - s.price/s.size) / a3.area_average)::numeric, 1)  as area_aged_sized_discount,\n    round(((s.first_price - s.price)/s.first_price * 100)::numeric, 1)  as price_drop_pecentage,\n    s.first_seen,\n    s.last_seen,\n    s.ad_id,\n    s.latest_seen_date,\n    s.status,\n    s.days_on_the_market,\n    s.price_3,\n    s.price_7,\n    s.price_15,\n    s.price_30,\n    s.price_45,\n    s.price_60,\n    sd.url,\n    sd.location2,\n    sd.street,\n    sd.num_views,\n    sd.advertiser,\n    sd.number_of_floors,\n    sd.year_built,\n    sd.year_last_renovated,\n    sd.total_liveable_area,\n    sd.net_area,\n    sd.number_of_rooms,\n    sd.number_of_parking_spots,\n    sd.balcony_terrace,\n    case when RIGHT(sd.floor, 1) like '.'\n        then SUBSTR(sd.floor, 1, LENGTH(sd.floor)-1)\n        else sd.floor\n    end as floor_desc,\n    sd.furbishment_state,\n    sd.epc_rating,\n    sd.table_data,\n    sd.description,\n    sd.extra_description,\n    sd.seen_time,\n\n    sd.apartment_type,\n    case\n        when RIGHT(sd.total_number_of_floors_in_building, 1) like '.'\n            then SUBSTR(sd.total_number_of_floors_in_building, 1, LENGTH(sd.total_number_of_floors_in_building)-1)::integer\n        when lower(sd.total_number_of_floors_in_building) like '%prizemlje%'\n            then 1\n        when sd.total_number_of_floors_in_building like '25+'\n            then 25\n        else sd.total_number_of_floors_in_building::integer\n    end as total_number_of_floors_in_building\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_price_history\" s\njoin \"property_cro\".\"analytics_sales_flats\".\"vw_avg_ask_px_per_loc\"  a on s.location = a.location\nleft join \"property_cro\".\"staging\".\"sale_flat_desc\" sd on s.ad_id = sd.ad_id\nleft join \"property_cro\".\"analytics_sales_flats\".\"vw_avg_ask_px_per_loc_size\" a2 on s.location = a2.location and FLOOR(s.size / 20) * 20 = a2.size\nleft join \"property_cro\".\"analytics_sales_flats\".\"vw_avg_ask_px_per_loc_year_size\" a3 on s.location = a3.location and FLOOR(s.size / 20) * 20 = a3.size and FLOOR(sd.year_built / 20) * 20 = a3.year_range", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.1vw_last_ad_time_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats", "name": "1vw_last_ad_time_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/1vw_last_ad_time_sales_flats.sql", "original_file_path": "models/sales_flats/1vw_last_ad_time_sales_flats.sql", "unique_id": "model.property_cro.1vw_last_ad_time_sales_flats", "fqn": ["property_cro", "sales_flats", "1vw_last_ad_time_sales_flats"], "alias": "vw_last_ad_time", "checksum": {"name": "sha256", "checksum": "188d8f0e9fd426756010506c8d62bb001c364788e3a6c0253028d88432ff1e5c"}, "config": {"enabled": true, "alias": "vw_last_ad_time", "schema": "sales_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats", "alias": "vw_last_ad_time"}, "created_at": 1709473941.3385248, "relation_name": "\"property_cro\".\"analytics_sales_flats\".\"vw_last_ad_time\"", "raw_code": "{{ config(materialized='view', schema='sales_flats', alias='vw_last_ad_time') }}\n\n{{ last_ad_time_macro('staging', 'sales_flats') }}", "language": "sql", "refs": [], "sources": [["staging", "sales_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.last_ad_time_macro"], "nodes": ["source.property_cro.staging.sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/1vw_last_ad_time_sales_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    ad_id,\n    min(seen_date) as first_seen,\n    max(seen_date) as last_seen,\n    case\n        when max(seen_date) < now()::date - INTERVAL '4 DAY'\n            then 'inactive'\n        else 'active'\n    end as status,\n    max(seen_date) - min(seen_date) as days_on_the_market\nfrom \"property_cro\".\"staging\".\"sales_flats\"\ngroup by ad_id\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats", "name": "3vw_avg_ask_px_per_loc_year_size_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/3vw_avg_ask_px_per_loc_year_size_sales_flats.sql", "original_file_path": "models/sales_flats/3vw_avg_ask_px_per_loc_year_size_sales_flats.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_flats", "fqn": ["property_cro", "sales_flats", "3vw_avg_ask_px_per_loc_year_size_sales_flats"], "alias": "vw_avg_ask_px_per_loc_year_size", "checksum": {"name": "sha256", "checksum": "33542d0c95e6c7eb82aa4356e95d967b0e9bf1f7b128273d8865556221f545d5"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc_year_size", "schema": "sales_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats", "alias": "vw_avg_ask_px_per_loc_year_size"}, "created_at": 1709473941.342995, "relation_name": "\"property_cro\".\"analytics_sales_flats\".\"vw_avg_ask_px_per_loc_year_size\"", "raw_code": "{{ config(materialized='view', schema='sales_flats', alias='vw_avg_ask_px_per_loc_year_size') }}\n\n{{ avg_px_per_loc_and_size_and_age_macro('2mv_price_history_sales_flats', 'staging', 'sale_flat_desc', '270 DAY', '30000') }}", "language": "sql", "refs": [{"name": "2mv_price_history_sales_flats", "package": null, "version": null}], "sources": [["staging", "sale_flat_desc"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_and_size_and_age_macro"], "nodes": ["source.property_cro.staging.sale_flat_desc", "model.property_cro.2mv_price_history_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/3vw_avg_ask_px_per_loc_year_size_sales_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct\n\tlocation,\n    FLOOR(year_built / 20) * 20 as year_range,\n    FLOOR(size / 20) * 20 as size,\n\tcount(distinct vh.ad_id) area_total_ads,\n\tavg(price/size) as area_average\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_price_history\" vh\njoin \"property_cro\".\"staging\".\"sale_flat_desc\" sd on vh.ad_id = sd.ad_id\nWHERE last_seen >=  now()::date - INTERVAL '270 DAY'\n    and year_built is not null and size is not null\n    and price > 30000\ngroup by location, FLOOR(year_built / 20), FLOOR(size / 20)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.3vw_avg_ask_px_per_loc_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats", "name": "3vw_avg_ask_px_per_loc_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/3vw_avg_ask_px_per_loc_sales_flats.sql", "original_file_path": "models/sales_flats/3vw_avg_ask_px_per_loc_sales_flats.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_sales_flats", "fqn": ["property_cro", "sales_flats", "3vw_avg_ask_px_per_loc_sales_flats"], "alias": "vw_avg_ask_px_per_loc", "checksum": {"name": "sha256", "checksum": "e1ae3f157430f53d89dfed8101e641699bfd8e06b2b905e8ca9cd1fb55993a93"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc", "schema": "sales_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats", "alias": "vw_avg_ask_px_per_loc"}, "created_at": 1709473941.348639, "relation_name": "\"property_cro\".\"analytics_sales_flats\".\"vw_avg_ask_px_per_loc\"", "raw_code": "{{ config(materialized='view', schema='sales_flats', alias='vw_avg_ask_px_per_loc') }}\n\n{{ avg_px_per_loc_macro('2mv_price_history_sales_flats', '270 DAY', '30000') }}", "language": "sql", "refs": [{"name": "2mv_price_history_sales_flats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_macro"], "nodes": ["model.property_cro.2mv_price_history_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/3vw_avg_ask_px_per_loc_sales_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct\n\tlocation,\n\tcount(ad_id) over (partition by location) as area_total_ads,\n\tavg(price/size) over (partition by location) as area_average\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_price_history\"\nwhere last_seen > now()::date - INTERVAL '270 DAY'\n    and price > 30000\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_general_location_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats_analysis", "name": "mv_inventory_general_location_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/analysis/mv_inventory_general_location_sales_flats.sql", "original_file_path": "models/sales_flats/analysis/mv_inventory_general_location_sales_flats.sql", "unique_id": "model.property_cro.mv_inventory_general_location_sales_flats", "fqn": ["property_cro", "sales_flats", "analysis", "mv_inventory_general_location_sales_flats"], "alias": "mv_inventory_general_location_sales_flats", "checksum": {"name": "sha256", "checksum": "c695be40f5f0d45b5664b07b79b02ee1634df9bee6943b423f679554e2b3bcdb"}, "config": {"enabled": true, "alias": "mv_inventory_general_location_sales_flats", "schema": "sales_flats_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_flats_analysis", "alias": "mv_inventory_general_location_sales_flats"}, "created_at": 1709473941.3546329, "relation_name": "\"property_cro\".\"analytics_sales_flats_analysis\".\"mv_inventory_general_location_sales_flats\"", "raw_code": "{{ config(materialized='table', schema='sales_flats_analysis', alias='mv_inventory_general_location_sales_flats') }}\n\n{{ inventory_per_general_location_macro('4mv_enriched_ad_sales_flats', 'staging', 'sales_flats', '2mv_price_history_sales_flats') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "2mv_price_history_sales_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}], "sources": [["staging", "sales_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_per_general_location_macro"], "nodes": ["source.property_cro.staging.sales_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.mv_date_to_quarter_mapping", "model.property_cro.2mv_price_history_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/analysis/mv_inventory_general_location_sales_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select quarter,\n           substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n           count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n           round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n           round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n           round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n           round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d on first_seen = date_\n    where location in (select location from zg_loc)\n    group by d.quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n), sold_ads as (\n    select\n        quarter,\n        substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on s.first_seen = d.date_\n    where status = 'inactive'\n        and location in (select location from zg_loc)\n    group by d.quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n), actives as (\n    select\n        d.quarter,\n        substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"sales_flats\" s\n    join \"property_cro\".\"analytics_sales_flats\".\"mv_price_history\" as hist2\n        on s.ad_id = hist2.ad_id\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on seen_date = date_\n    where s.location in (select location from zg_loc)\n    group by quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n)\nselect\n    a.quarter as year_month,\n    a.location,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\njoin sold_ads r on n.quarter = r.quarter and n.location = r.location\njoin actives a on n.quarter = a.quarter and n.location = a.location\norder by n.quarter desc\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_location_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats_analysis", "name": "mv_inventory_location_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/analysis/mv_inventory_location_sales_flats.sql", "original_file_path": "models/sales_flats/analysis/mv_inventory_location_sales_flats.sql", "unique_id": "model.property_cro.mv_inventory_location_sales_flats", "fqn": ["property_cro", "sales_flats", "analysis", "mv_inventory_location_sales_flats"], "alias": "mv_inventory_location_sales_flats", "checksum": {"name": "sha256", "checksum": "d5ff14b0eb121b462b5723f04dac992299aa8d5f46f7334c768ebd5486892924"}, "config": {"enabled": true, "alias": "mv_inventory_location_sales_flats", "schema": "sales_flats_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_flats_analysis", "alias": "mv_inventory_location_sales_flats"}, "created_at": 1709473941.360847, "relation_name": "\"property_cro\".\"analytics_sales_flats_analysis\".\"mv_inventory_location_sales_flats\"", "raw_code": "{{ config(materialized='table', schema='sales_flats_analysis', alias='mv_inventory_location_sales_flats') }}\n\n{{ inventory_per_location_macro('4mv_enriched_ad_sales_flats', 'staging', 'sales_flats', '2mv_price_history_sales_flats') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "2mv_price_history_sales_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}], "sources": [["staging", "sales_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_per_location_macro"], "nodes": ["source.property_cro.staging.sales_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.mv_date_to_quarter_mapping", "model.property_cro.2mv_price_history_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/analysis/mv_inventory_location_sales_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select quarter,\n           s.location,\n           count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n           round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n           round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n           round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n           round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d on first_seen = date_\n    where location in (select location from zg_loc)\n    group by d.quarter, s.location\n), sold_ads as (\n    select\n        quarter,\n        s.location,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on s.first_seen = d.date_\n    where status = 'inactive'\n        and location in (select location from zg_loc)\n    group by d.quarter, s.location\n), actives as (\n    select\n        d.quarter,\n        s.location,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"sales_flats\" s\n    join \"property_cro\".\"analytics_sales_flats\".\"mv_price_history\" as hist2\n        on s.ad_id = hist2.ad_id\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on seen_date = date_\n    where s.location in (select location from zg_loc)\n    group by quarter, s.location\n)\nselect\n    a.quarter as year_month,\n    a.location,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\njoin sold_ads r on n.quarter = r.quarter and n.location = r.location\njoin actives a on n.quarter = a.quarter and n.location = a.location\norder by n.quarter desc\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats_analysis", "name": "mv_inventory_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/analysis/mv_inventory_sales_flats.sql", "original_file_path": "models/sales_flats/analysis/mv_inventory_sales_flats.sql", "unique_id": "model.property_cro.mv_inventory_sales_flats", "fqn": ["property_cro", "sales_flats", "analysis", "mv_inventory_sales_flats"], "alias": "mv_inventory_sales_flats", "checksum": {"name": "sha256", "checksum": "123e98524191a62d4c9c6082d24c74e9e3d0ed4e4e0003cc694a754f3ea6f526"}, "config": {"enabled": true, "alias": "mv_inventory_sales_flats", "schema": "sales_flats_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_flats_analysis", "alias": "mv_inventory_sales_flats"}, "created_at": 1709473941.3671339, "relation_name": "\"property_cro\".\"analytics_sales_flats_analysis\".\"mv_inventory_sales_flats\"", "raw_code": "{{ config(materialized='table', schema='sales_flats_analysis', alias='mv_inventory_sales_flats') }}\n\n{{ inventory_macro('4mv_enriched_ad_sales_flats', 'staging', 'sales_flats', '2mv_price_history_sales_flats') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "2mv_price_history_sales_flats", "package": null, "version": null}], "sources": [["staging", "sales_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_macro"], "nodes": ["source.property_cro.staging.sales_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.2mv_price_history_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/analysis/mv_inventory_sales_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select\n        date_trunc('month', first_seen) as year_month,\n        count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\n    where location in (select location from zg_loc)\n    group by date_trunc('month', first_seen)\n), sold_ads as (\n    select\n        date_trunc('month', last_seen) as year_month,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\n    where status = 'inactive' and location in (select location from zg_loc)\n    group by date_trunc('month', last_seen)\n), actives as (\n    select\n        date_trunc('month', seen_date) as year_month,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"sales_flats\" s\n    join \"property_cro\".\"analytics_sales_flats\".\"mv_price_history\" as hist2\n    on s.ad_id = hist2.ad_id\n    where s.location in (select location from zg_loc)\n    group by date_trunc('month', seen_date)\n)\nselect\n    n.year_month,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\n         join sold_ads r on n.year_month = r.year_month\n         join actives a on n.year_month = a.year_month\norder by n.year_month desc\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.vw_best_streets_in_zagreb": {"database": "property_cro", "schema": "analytics_sales_flats_alerts", "name": "vw_best_streets_in_zagreb", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/alerts/vw_best_streets_in_zagreb.sql", "original_file_path": "models/sales_flats/alerts/vw_best_streets_in_zagreb.sql", "unique_id": "model.property_cro.vw_best_streets_in_zagreb", "fqn": ["property_cro", "sales_flats", "alerts", "vw_best_streets_in_zagreb"], "alias": "vw_best_streets_zg", "checksum": {"name": "sha256", "checksum": "3dac3c61b18f56703c99aeac6d851ca2096c7c36820ae7e743d55ce9725b490d"}, "config": {"enabled": true, "alias": "vw_best_streets_zg", "schema": "sales_flats_alerts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats_alerts", "alias": "vw_best_streets_zg"}, "created_at": 1709473941.3725262, "relation_name": "\"property_cro\".\"analytics_sales_flats_alerts\".\"vw_best_streets_zg\"", "raw_code": "{{ config(materialized='view', schema='sales_flats_alerts', alias='vw_best_streets_zg') }}\n\nselect location,\n       title,\n       link,\n       flat_type,\n       floor,\n       size,\n       price,\n       first_price,\n       current_price,\n       num_seen,\n       price_m2,\n       area_price_m2,\n       area_discount,\n       area_sized_price_m2,\n       area_aged_sized_price_m2,\n       price_drop_pecentage,\n       first_seen,\n       last_seen,\n       ad_id,\n       latest_seen_date,\n       status,\n       days_on_the_market,\n       price_7,\n       price_15,\n       price_30,\n       price_45,\n       price_60,\n       url,\n       location2,\n       street,\n       num_views,\n       apartment_type,\n       number_of_floors,\n       year_built,\n       year_last_renovated,\n       total_liveable_area,\n       net_area,\n       number_of_rooms,\n       number_of_parking_spots,\n       balcony_terrace,\n       total_number_of_floors_in_building,\n       furbishment_state,\n       epc_rating,\n       table_data,\n       description,\n       extra_description,\n       seen_time,\n       advertiser\nfrom {{ ref('4mv_enriched_ad_sales_flats') }}\nwhere\n(\n    -- sredi\u0161\u0107e\n    lower(description) like '%brune bu\u0161i\u0107a%' or\n    lower(title) like '%brune bu\u0161i\u0107a%' or\n    lower(description) like '%knifer%' or\n    lower(title) like '%knifer%' or\n    lower(description) like '%kantoci%' or\n    lower(title) like '%kantoci%' or\n    lower(description) like '%baki\u0107%' or\n    lower(title) like '%baki\u0107%' or\n        -- savica\n    lower(description) like '%lastovska%' or\n    lower(title) like '%lastovska%' or\n    lower(description) like '%zinke kunc%' or\n    lower(title) like '%zinke kunc%' or\n    lower(description) like '%zinke kunc%' or\n    lower(title) like '%zinke kunc%' or\n    -- borovje\n    lower(description) like '%grada chicaga%' or\n    lower(title) like '%grada chicaga%' or\n    lower(description) like '%mi\u0161eve\u010dka%' or\n    lower(title) like '%mi\u0161eve\u010dka%' or\n    -- sige\u010dica\n    lower(description) like '%rapska%' or\n    lower(title) like '%rapska%' or\n    lower(description) like '%kornatska%' or\n    lower(title) like '%kornatska%' or\n    lower(description) like '%folnegovi\u0107a%' or\n    lower(title) like '%folnegovi\u0107a%' or\n    -- cvjetno naselje\n    lower(description) like '%cvjetna cesta%' or\n    lower(title) like '%cvjetna cesta%' or\n    -- maksimir\n    lower(description) like '%kraljevi\u0107eva%' or\n    lower(title) like '%kraljevi\u0107eva%' or\n    lower(description) like '%bo\u017eidarevi\u0107eva%' or\n    lower(title) like '%bo\u017eidarevi\u0107eva%' or\n    lower(description) like '%\u010diko\u0161eva%' or\n    lower(title) like '%\u010diko\u0161eva%' or\n    lower(description) like '%crn\u010di\u0107eva%' or\n    lower(title) like '%crn\u010di\u0107eva%' or\n    lower(description) like '%klovi\u0107eva%' or\n    lower(title) like '%klovi\u0107eva%' or\n    lower(description) like '%bu\u017eanova%' or\n    lower(title) like '%bu\u017eanova%' or\n    lower(description) like '%haramba\u0161i\u0107eva%' or\n    lower(title) like '%haramba\u0161i\u0107eva%' or\n    lower(description) like '%ru\u017emarink%' or\n    lower(title) like '%ru\u017emarink%' or\n    lower(description) like '%\u010derinina%' or\n    lower(title) like '%\u010derinina%' or\n    -- centar\n    lower(description) like '%jurkovi\u0107ev%' or\n    lower(title) like '%jurkovi\u0107ev%' or\n    lower(description) like '%centar zvonimir%' or\n    lower(title) like '%centar zvonimir%' or\n    lower(description) like '%banjav\u010di\u0107ev%' or\n    lower(title) like '%banjav\u010di\u0107ev%' or\n    lower(description) like '%ljudevita posavskog%' or\n    lower(title) like '%ljudevita posavskog%' or\n    lower(description) like '%vrbani\u0107eva%' or\n    lower(title) like '%vrbani\u0107eva%' or\n    -- trnje\n    lower(description) like '%pile%' or\n    lower(title) like '%pile%' or\n    lower(description) like '%\u0161trigina%' or\n    lower(title) like '%\u0161trigina%' or\n    lower(description) like '%supilova%' or\n    lower(title) like '%supilova%' or\n    lower(description) like '%strojarska%' or\n    lower(title) like '%strojarska%' or\n    -- crnomerec\n    lower(description) like '%bleiweisova%' or\n    lower(title) like '%bleiweisova%' or\n    lower(description) like '%slovenska%' or\n    lower(title) like '%slovenska%' or\n    -- vrbani\n    lower(description) like '%palinove\u010dka%' or\n    lower(title) like '%palinove\u010dka%' or\n    -- jarun\n    lower(description) like '%hrgovi\u0107i%' or\n    lower(title) like '%hrgovi\u0107i%' or\n    lower(description) like '%bernarda vukasa%' or\n    lower(title) like '%bernarda vukasa%' or\n    lower(description) like '%stipan\u010di\u0107a%' or\n    lower(title) like '%stipan\u010di\u0107a%' or\n    lower(description) like '%macanovi\u0107a%' or\n    lower(title) like '%macanovi\u0107a%' or\n    lower(description) like '%ljubi\u0107a vojvode%' or\n    lower(title) like '%ljubi\u0107a vojvode%' or\n    -- jarun\n    lower(location) like '%jarun%' or\n    lower(location) like '%gredice%' or\n    -- ravnice\n    lower(description) like '%radau\u0161eva%' or\n    lower(title) like '%radau\u0161eva%' or\n    lower(description) like '%augustin\u010di\u0107a%' or\n    lower(title) like '%augustin\u010di\u0107a%' or\n    lower(description) like '%\u0161eferova%' or\n    lower(title) like '%\u0161eferova%'\n)\nand (year_built > 1970 or year_built is null or description not like '%starij%')\nand status = 'active'\nand (floor is null or total_number_of_floors_in_building is null or floor_desc != total_number_of_floors_in_building::text)\nand number_of_floors = 'Jednoeta\u017eni'\nand floor like '%kat'\nand flat_type = 'Stan u stambenoj zgradi'\nand (furbishment_state is null or furbishment_state!= 'Za renoviranje')\nand size > 30\nand price between 60000 and 190000\nand price_m2 <= 3500\norder by first_seen desc", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.property_cro.4mv_enriched_ad_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/alerts/vw_best_streets_in_zagreb.sql", "compiled": true, "compiled_code": "\n\nselect location,\n       title,\n       link,\n       flat_type,\n       floor,\n       size,\n       price,\n       first_price,\n       current_price,\n       num_seen,\n       price_m2,\n       area_price_m2,\n       area_discount,\n       area_sized_price_m2,\n       area_aged_sized_price_m2,\n       price_drop_pecentage,\n       first_seen,\n       last_seen,\n       ad_id,\n       latest_seen_date,\n       status,\n       days_on_the_market,\n       price_7,\n       price_15,\n       price_30,\n       price_45,\n       price_60,\n       url,\n       location2,\n       street,\n       num_views,\n       apartment_type,\n       number_of_floors,\n       year_built,\n       year_last_renovated,\n       total_liveable_area,\n       net_area,\n       number_of_rooms,\n       number_of_parking_spots,\n       balcony_terrace,\n       total_number_of_floors_in_building,\n       furbishment_state,\n       epc_rating,\n       table_data,\n       description,\n       extra_description,\n       seen_time,\n       advertiser\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\nwhere\n(\n    -- sredi\u0161\u0107e\n    lower(description) like '%brune bu\u0161i\u0107a%' or\n    lower(title) like '%brune bu\u0161i\u0107a%' or\n    lower(description) like '%knifer%' or\n    lower(title) like '%knifer%' or\n    lower(description) like '%kantoci%' or\n    lower(title) like '%kantoci%' or\n    lower(description) like '%baki\u0107%' or\n    lower(title) like '%baki\u0107%' or\n        -- savica\n    lower(description) like '%lastovska%' or\n    lower(title) like '%lastovska%' or\n    lower(description) like '%zinke kunc%' or\n    lower(title) like '%zinke kunc%' or\n    lower(description) like '%zinke kunc%' or\n    lower(title) like '%zinke kunc%' or\n    -- borovje\n    lower(description) like '%grada chicaga%' or\n    lower(title) like '%grada chicaga%' or\n    lower(description) like '%mi\u0161eve\u010dka%' or\n    lower(title) like '%mi\u0161eve\u010dka%' or\n    -- sige\u010dica\n    lower(description) like '%rapska%' or\n    lower(title) like '%rapska%' or\n    lower(description) like '%kornatska%' or\n    lower(title) like '%kornatska%' or\n    lower(description) like '%folnegovi\u0107a%' or\n    lower(title) like '%folnegovi\u0107a%' or\n    -- cvjetno naselje\n    lower(description) like '%cvjetna cesta%' or\n    lower(title) like '%cvjetna cesta%' or\n    -- maksimir\n    lower(description) like '%kraljevi\u0107eva%' or\n    lower(title) like '%kraljevi\u0107eva%' or\n    lower(description) like '%bo\u017eidarevi\u0107eva%' or\n    lower(title) like '%bo\u017eidarevi\u0107eva%' or\n    lower(description) like '%\u010diko\u0161eva%' or\n    lower(title) like '%\u010diko\u0161eva%' or\n    lower(description) like '%crn\u010di\u0107eva%' or\n    lower(title) like '%crn\u010di\u0107eva%' or\n    lower(description) like '%klovi\u0107eva%' or\n    lower(title) like '%klovi\u0107eva%' or\n    lower(description) like '%bu\u017eanova%' or\n    lower(title) like '%bu\u017eanova%' or\n    lower(description) like '%haramba\u0161i\u0107eva%' or\n    lower(title) like '%haramba\u0161i\u0107eva%' or\n    lower(description) like '%ru\u017emarink%' or\n    lower(title) like '%ru\u017emarink%' or\n    lower(description) like '%\u010derinina%' or\n    lower(title) like '%\u010derinina%' or\n    -- centar\n    lower(description) like '%jurkovi\u0107ev%' or\n    lower(title) like '%jurkovi\u0107ev%' or\n    lower(description) like '%centar zvonimir%' or\n    lower(title) like '%centar zvonimir%' or\n    lower(description) like '%banjav\u010di\u0107ev%' or\n    lower(title) like '%banjav\u010di\u0107ev%' or\n    lower(description) like '%ljudevita posavskog%' or\n    lower(title) like '%ljudevita posavskog%' or\n    lower(description) like '%vrbani\u0107eva%' or\n    lower(title) like '%vrbani\u0107eva%' or\n    -- trnje\n    lower(description) like '%pile%' or\n    lower(title) like '%pile%' or\n    lower(description) like '%\u0161trigina%' or\n    lower(title) like '%\u0161trigina%' or\n    lower(description) like '%supilova%' or\n    lower(title) like '%supilova%' or\n    lower(description) like '%strojarska%' or\n    lower(title) like '%strojarska%' or\n    -- crnomerec\n    lower(description) like '%bleiweisova%' or\n    lower(title) like '%bleiweisova%' or\n    lower(description) like '%slovenska%' or\n    lower(title) like '%slovenska%' or\n    -- vrbani\n    lower(description) like '%palinove\u010dka%' or\n    lower(title) like '%palinove\u010dka%' or\n    -- jarun\n    lower(description) like '%hrgovi\u0107i%' or\n    lower(title) like '%hrgovi\u0107i%' or\n    lower(description) like '%bernarda vukasa%' or\n    lower(title) like '%bernarda vukasa%' or\n    lower(description) like '%stipan\u010di\u0107a%' or\n    lower(title) like '%stipan\u010di\u0107a%' or\n    lower(description) like '%macanovi\u0107a%' or\n    lower(title) like '%macanovi\u0107a%' or\n    lower(description) like '%ljubi\u0107a vojvode%' or\n    lower(title) like '%ljubi\u0107a vojvode%' or\n    -- jarun\n    lower(location) like '%jarun%' or\n    lower(location) like '%gredice%' or\n    -- ravnice\n    lower(description) like '%radau\u0161eva%' or\n    lower(title) like '%radau\u0161eva%' or\n    lower(description) like '%augustin\u010di\u0107a%' or\n    lower(title) like '%augustin\u010di\u0107a%' or\n    lower(description) like '%\u0161eferova%' or\n    lower(title) like '%\u0161eferova%'\n)\nand (year_built > 1970 or year_built is null or description not like '%starij%')\nand status = 'active'\nand (floor is null or total_number_of_floors_in_building is null or floor_desc != total_number_of_floors_in_building::text)\nand number_of_floors = 'Jednoeta\u017eni'\nand floor like '%kat'\nand flat_type = 'Stan u stambenoj zgradi'\nand (furbishment_state is null or furbishment_state!= 'Za renoviranje')\nand size > 30\nand price between 60000 and 190000\nand price_m2 <= 3500\norder by first_seen desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.vw_price_drops_alert_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats_alerts", "name": "vw_price_drops_alert_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/alerts/vw_price_drops_alert_sales_flats.sql", "original_file_path": "models/sales_flats/alerts/vw_price_drops_alert_sales_flats.sql", "unique_id": "model.property_cro.vw_price_drops_alert_sales_flats", "fqn": ["property_cro", "sales_flats", "alerts", "vw_price_drops_alert_sales_flats"], "alias": "vw_price_drops", "checksum": {"name": "sha256", "checksum": "46b1747db33bab51b59d1bc28c70937c9455edda7eb250929536884eb0e98597"}, "config": {"enabled": true, "alias": "vw_price_drops", "schema": "sales_flats_alerts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats_alerts", "alias": "vw_price_drops"}, "created_at": 1709473941.374252, "relation_name": "\"property_cro\".\"analytics_sales_flats_alerts\".\"vw_price_drops\"", "raw_code": "{{ config(materialized='view', schema='sales_flats_alerts', alias='vw_price_drops') }}\n\nselect\n       m1.location,\n       m1.title,\n       m1.link,\n       m1.flat_type,\n       m1.floor,\n       m1.size,\n       m1.price,\n       m1.first_price,\n       m1.current_price,\n       m1.num_seen,\n       m1.price_m2,\n       m1.area_price_m2,\n       m1.area_discount,\n       m1.area_sized_price_m2,\n       m1.area_sized_discount,\n       m1.area_aged_sized_price_m2,\n       m1.area_aged_sized_discount,\n       m1.price_drop_pecentage,\n       m1.first_seen,\n       m1.last_seen,\n       m1.ad_id,\n       m1.latest_seen_date,\n       m1.status,\n       m1.days_on_the_market,\n       m1.price_7,\n       m1.price_15,\n       m1.price_30,\n       m1.price_45,\n       m1.price_60,\n       m1.url,\n       m1.location2,\n       m1.street,\n       m1.num_views,\n       m1.apartment_type,\n       m1.number_of_floors,\n       m1.year_built,\n       m1.year_last_renovated,\n       m1.total_liveable_area,\n       m1.net_area,\n       m1.number_of_rooms,\n       m1.number_of_parking_spots,\n       m1.balcony_terrace,\n       m1.total_number_of_floors_in_building,\n       m1.furbishment_state,\n       m1.epc_rating,\n       m1.table_data,\n       m1.description,\n       m1.extra_description,\n       m1.seen_time,\n       m1.advertiser\nfrom {{ ref('4mv_enriched_ad_sales_flats') }} as m1\nwhere\n    m1.floor like '%kat%'\n    and m1.price <= 250000\n    and m1.price > 1000\n    and m1.current_price < m1.price_7 * 0.98\n    and m1.status = 'active'\norder by m1.first_seen desc", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.property_cro.4mv_enriched_ad_sales_flats"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/alerts/vw_price_drops_alert_sales_flats.sql", "compiled": true, "compiled_code": "\n\nselect\n       m1.location,\n       m1.title,\n       m1.link,\n       m1.flat_type,\n       m1.floor,\n       m1.size,\n       m1.price,\n       m1.first_price,\n       m1.current_price,\n       m1.num_seen,\n       m1.price_m2,\n       m1.area_price_m2,\n       m1.area_discount,\n       m1.area_sized_price_m2,\n       m1.area_sized_discount,\n       m1.area_aged_sized_price_m2,\n       m1.area_aged_sized_discount,\n       m1.price_drop_pecentage,\n       m1.first_seen,\n       m1.last_seen,\n       m1.ad_id,\n       m1.latest_seen_date,\n       m1.status,\n       m1.days_on_the_market,\n       m1.price_7,\n       m1.price_15,\n       m1.price_30,\n       m1.price_45,\n       m1.price_60,\n       m1.url,\n       m1.location2,\n       m1.street,\n       m1.num_views,\n       m1.apartment_type,\n       m1.number_of_floors,\n       m1.year_built,\n       m1.year_last_renovated,\n       m1.total_liveable_area,\n       m1.net_area,\n       m1.number_of_rooms,\n       m1.number_of_parking_spots,\n       m1.balcony_terrace,\n       m1.total_number_of_floors_in_building,\n       m1.furbishment_state,\n       m1.epc_rating,\n       m1.table_data,\n       m1.description,\n       m1.extra_description,\n       m1.seen_time,\n       m1.advertiser\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\" as m1\nwhere\n    m1.floor like '%kat%'\n    and m1.price <= 250000\n    and m1.price > 1000\n    and m1.current_price < m1.price_7 * 0.98\n    and m1.status = 'active'\norder by m1.first_seen desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.vw_modern_central_alert_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats_alerts", "name": "vw_modern_central_alert_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/alerts/vw_modern_central_alert_sales_flats.sql", "original_file_path": "models/sales_flats/alerts/vw_modern_central_alert_sales_flats.sql", "unique_id": "model.property_cro.vw_modern_central_alert_sales_flats", "fqn": ["property_cro", "sales_flats", "alerts", "vw_modern_central_alert_sales_flats"], "alias": "vw_modern_central_flats", "checksum": {"name": "sha256", "checksum": "641ef9335f92d1652ebfbcaaf0914cb47d3ced8539be5e0ec1dbda664d331643"}, "config": {"enabled": true, "alias": "vw_modern_central_flats", "schema": "sales_flats_alerts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats_alerts", "alias": "vw_modern_central_flats"}, "created_at": 1709473941.3758569, "relation_name": "\"property_cro\".\"analytics_sales_flats_alerts\".\"vw_modern_central_flats\"", "raw_code": "{{ config(materialized='view', schema='sales_flats_alerts', alias='vw_modern_central_flats') }}\n\nselect location,\n       title,\n       link,\n       flat_type,\n       floor,\n       size,\n       price,\n       first_price,\n       current_price,\n       num_seen,\n       price_m2,\n       area_price_m2,\n       area_discount,\n       area_sized_price_m2,\n       area_aged_sized_price_m2,\n       price_drop_pecentage,\n       first_seen,\n       last_seen,\n       ad_id,\n       latest_seen_date,\n       status,\n       days_on_the_market,\n       price_3,\n       price_7,\n       price_15,\n       price_30,\n       price_45,\n       price_60,\n       url,\n       location2,\n       street,\n       num_views,\n       apartment_type,\n       number_of_floors,\n       year_built,\n       year_last_renovated,\n       total_liveable_area,\n       net_area,\n       number_of_rooms,\n       number_of_parking_spots,\n       balcony_terrace,\n       total_number_of_floors_in_building,\n       furbishment_state,\n       epc_rating,\n       table_data,\n       description,\n       extra_description,\n       seen_time,\n       advertiser\nfrom {{ ref('4mv_enriched_ad_sales_flats') }}\nwhere\n  location in (select location from {{ ref('zagreb_locations') }}) and\n     (\n        (year_built > 1970 )\n        or ((lower(title) like '%novogradnj%' or lower(title) like '%novij%'\n            or lower(description) like '%novogradnj%' or lower(description) like '%novij%')\n            AND year_built is null\n        )\n     )\n--     and number_of_rooms >= 1\n--      and (total_number_of_floors_in_building > 3 or total_number_of_floors_in_building is null)\n--       and ((number_of_rooms = 3 and price <= 185000 and price_m2 < area_price_m2 and year_built > 1980)\n--                or (number_of_rooms = 2 and price <= 140000 and price_m2 < area_price_m2 and year_built > 1965))\n    and status = 'active'\n    and number_of_rooms > 0\n    and price >= 55000\n    and price <= 250000\n--     and (\n--             (price <= 180000 and number_of_rooms = 3)\n--             or (price <= 150000 and number_of_rooms = 2)\n--     )\n    and price_m2 >= 1200\n    and price_m2 <= 3700\n    and price_m2 < 1.5 * area_aged_sized_price_m2\n    and (number_of_floors = 'Jednoeta\u017eni' or number_of_floors is null)\n    and (total_number_of_floors_in_building is null\n             or floor_desc is null\n            or (floor_desc != total_number_of_floors_in_building::text and floor_desc is not null)\n        )\n    and (floor is null or floor like '%kat%')\n    and size > 25\n    and (flat_type is null or flat_type not like 'Stan u ku\u0107i')\n    order by first_seen desc", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "zagreb_locations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.zagreb_locations"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/alerts/vw_modern_central_alert_sales_flats.sql", "compiled": true, "compiled_code": "\n\nselect location,\n       title,\n       link,\n       flat_type,\n       floor,\n       size,\n       price,\n       first_price,\n       current_price,\n       num_seen,\n       price_m2,\n       area_price_m2,\n       area_discount,\n       area_sized_price_m2,\n       area_aged_sized_price_m2,\n       price_drop_pecentage,\n       first_seen,\n       last_seen,\n       ad_id,\n       latest_seen_date,\n       status,\n       days_on_the_market,\n       price_3,\n       price_7,\n       price_15,\n       price_30,\n       price_45,\n       price_60,\n       url,\n       location2,\n       street,\n       num_views,\n       apartment_type,\n       number_of_floors,\n       year_built,\n       year_last_renovated,\n       total_liveable_area,\n       net_area,\n       number_of_rooms,\n       number_of_parking_spots,\n       balcony_terrace,\n       total_number_of_floors_in_building,\n       furbishment_state,\n       epc_rating,\n       table_data,\n       description,\n       extra_description,\n       seen_time,\n       advertiser\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\nwhere\n  location in (select location from \"property_cro\".\"analytics_common\".\"zagreb_locations\") and\n     (\n        (year_built > 1970 )\n        or ((lower(title) like '%novogradnj%' or lower(title) like '%novij%'\n            or lower(description) like '%novogradnj%' or lower(description) like '%novij%')\n            AND year_built is null\n        )\n     )\n--     and number_of_rooms >= 1\n--      and (total_number_of_floors_in_building > 3 or total_number_of_floors_in_building is null)\n--       and ((number_of_rooms = 3 and price <= 185000 and price_m2 < area_price_m2 and year_built > 1980)\n--                or (number_of_rooms = 2 and price <= 140000 and price_m2 < area_price_m2 and year_built > 1965))\n    and status = 'active'\n    and number_of_rooms > 0\n    and price >= 55000\n    and price <= 250000\n--     and (\n--             (price <= 180000 and number_of_rooms = 3)\n--             or (price <= 150000 and number_of_rooms = 2)\n--     )\n    and price_m2 >= 1200\n    and price_m2 <= 3700\n    and price_m2 < 1.5 * area_aged_sized_price_m2\n    and (number_of_floors = 'Jednoeta\u017eni' or number_of_floors is null)\n    and (total_number_of_floors_in_building is null\n             or floor_desc is null\n            or (floor_desc != total_number_of_floors_in_building::text and floor_desc is not null)\n        )\n    and (floor is null or floor like '%kat%')\n    and size > 25\n    and (flat_type is null or flat_type not like 'Stan u ku\u0107i')\n    order by first_seen desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.vw_best_new_or_reduced_alert_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats_alerts", "name": "vw_best_new_or_reduced_alert_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/alerts/vw_best_new_or_reduced_alert_sales_flats.sql", "original_file_path": "models/sales_flats/alerts/vw_best_new_or_reduced_alert_sales_flats.sql", "unique_id": "model.property_cro.vw_best_new_or_reduced_alert_sales_flats", "fqn": ["property_cro", "sales_flats", "alerts", "vw_best_new_or_reduced_alert_sales_flats"], "alias": "vw_best_new_or_reduced_flats", "checksum": {"name": "sha256", "checksum": "b7d8ba58e31e09be111da2e3f5a7d9079a7db9562d0a4ba5503aa58b9dc591b9"}, "config": {"enabled": true, "alias": "vw_best_new_or_reduced_flats", "schema": "sales_flats_alerts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats_alerts", "alias": "vw_best_new_or_reduced_flats"}, "created_at": 1709473941.377393, "relation_name": "\"property_cro\".\"analytics_sales_flats_alerts\".\"vw_best_new_or_reduced_flats\"", "raw_code": "{{ config(materialized='view', schema='sales_flats_alerts', alias='vw_best_new_or_reduced_flats') }}\n\nselect location,\n       title,\n       link,\n       flat_type,\n       floor,\n       size,\n       price,\n       first_price,\n       current_price,\n       num_seen,\n       price_m2,\n       area_price_m2,\n       area_discount,\n       area_sized_price_m2,\n       area_aged_sized_price_m2,\n       price_drop_pecentage,\n       first_seen,\n       last_seen,\n       ad_id,\n       latest_seen_date,\n       status,\n       days_on_the_market,\n       price_7,\n       price_15,\n       price_30,\n       price_45,\n       price_60,\n       url,\n       location2,\n       street,\n       num_views,\n       apartment_type,\n       number_of_floors,\n       year_built,\n       year_last_renovated,\n       total_liveable_area,\n       net_area,\n       number_of_rooms,\n       number_of_parking_spots,\n       balcony_terrace,\n       total_number_of_floors_in_building,\n       furbishment_state,\n       epc_rating,\n       table_data,\n       description,\n       extra_description,\n       seen_time,\n       advertiser\nfrom {{ ref('4mv_enriched_ad_sales_flats') }}\nwhere\n    location in (select location from {{ ref('zagreb_locations') }}) and\n    status = 'active' and\n    (floor is null or total_number_of_floors_in_building is null or floor_desc != total_number_of_floors_in_building::text)\n \tand (\n        (floor is null or floor like '%kat%')\n        or\n        (floor is null or floor like '%kat%')\n    )\n\tand (total_number_of_floors_in_building is null or total_number_of_floors_in_building > 2)\n \tand (description is null or lower(description) not like '%potkrovlj%' )\n\tand\n    (\n\t    (year_built > 1970 and year_built < 1980 and (\n            price/net_area < 1.1 * area_price_m2\n            or price/total_liveable_area < 1.1 * area_price_m2\n        ))\n        or\n\t    (year_built >= 1980 and year_built < 2001 and (\n            price/net_area < 1.25 * area_price_m2\n            or price/total_liveable_area < 1.25 * area_price_m2\n        ))\n\t    or\n\t    (year_built >= 2001\n\t         and (\n                price / net_area < 1.5 * area_price_m2\n                or price / total_liveable_area < 1.5 * area_price_m2)\n\t    )\n    )\n\tand (\n\t\tlower(title) like '%adaptiran%'\n\t\tor lower(title) like '%renoviran%'\n\t\tor lower(description) like '%adaptiran%'\n        or lower(description) like '%renoviran%'\n\t\tor year_built > 2000\n\t\tor year_last_renovated > 2000\n\t\tor (year_built between 1984 and 2000 and price_m2 < area_price_m2 * 1.1)\n\t\tor (year_built between 1971 and 1983 and price_m2 < area_price_m2 * 1.25)\n\t\tor (year_built is null and year_last_renovated is null)\n\t)\n    and (\n        (lower(title) not like '%adaptacij%' and lower(title) not like '%renovacij%' and lower(title) not like '%mansardni%')\n        or (lower(description) not like '%adaptacij%' and lower(description) not like '%renovacij%' and lower(description) not like '%mansardni%')\n\t)\n\tand flat_type = 'Stan u stambenoj zgradi'\n    and price > 50000\n    and price_m2 < 4000\n    and ((price <= 210000 and year_built < 2005) or (year_built >= 2005 and price <= 300000))\n    and (number_of_floors = 'Jednoeta\u017eni' or number_of_floors is null)\n    and location not like 'Sesvete%'\n    and location not like 'Podsljeme%'\n    and location not like 'Novi Zagreb - Zapad, Lu\u010dko'\n    order by first_seen desc", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "zagreb_locations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.zagreb_locations"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/alerts/vw_best_new_or_reduced_alert_sales_flats.sql", "compiled": true, "compiled_code": "\n\nselect location,\n       title,\n       link,\n       flat_type,\n       floor,\n       size,\n       price,\n       first_price,\n       current_price,\n       num_seen,\n       price_m2,\n       area_price_m2,\n       area_discount,\n       area_sized_price_m2,\n       area_aged_sized_price_m2,\n       price_drop_pecentage,\n       first_seen,\n       last_seen,\n       ad_id,\n       latest_seen_date,\n       status,\n       days_on_the_market,\n       price_7,\n       price_15,\n       price_30,\n       price_45,\n       price_60,\n       url,\n       location2,\n       street,\n       num_views,\n       apartment_type,\n       number_of_floors,\n       year_built,\n       year_last_renovated,\n       total_liveable_area,\n       net_area,\n       number_of_rooms,\n       number_of_parking_spots,\n       balcony_terrace,\n       total_number_of_floors_in_building,\n       furbishment_state,\n       epc_rating,\n       table_data,\n       description,\n       extra_description,\n       seen_time,\n       advertiser\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\nwhere\n    location in (select location from \"property_cro\".\"analytics_common\".\"zagreb_locations\") and\n    status = 'active' and\n    (floor is null or total_number_of_floors_in_building is null or floor_desc != total_number_of_floors_in_building::text)\n \tand (\n        (floor is null or floor like '%kat%')\n        or\n        (floor is null or floor like '%kat%')\n    )\n\tand (total_number_of_floors_in_building is null or total_number_of_floors_in_building > 2)\n \tand (description is null or lower(description) not like '%potkrovlj%' )\n\tand\n    (\n\t    (year_built > 1970 and year_built < 1980 and (\n            price/net_area < 1.1 * area_price_m2\n            or price/total_liveable_area < 1.1 * area_price_m2\n        ))\n        or\n\t    (year_built >= 1980 and year_built < 2001 and (\n            price/net_area < 1.25 * area_price_m2\n            or price/total_liveable_area < 1.25 * area_price_m2\n        ))\n\t    or\n\t    (year_built >= 2001\n\t         and (\n                price / net_area < 1.5 * area_price_m2\n                or price / total_liveable_area < 1.5 * area_price_m2)\n\t    )\n    )\n\tand (\n\t\tlower(title) like '%adaptiran%'\n\t\tor lower(title) like '%renoviran%'\n\t\tor lower(description) like '%adaptiran%'\n        or lower(description) like '%renoviran%'\n\t\tor year_built > 2000\n\t\tor year_last_renovated > 2000\n\t\tor (year_built between 1984 and 2000 and price_m2 < area_price_m2 * 1.1)\n\t\tor (year_built between 1971 and 1983 and price_m2 < area_price_m2 * 1.25)\n\t\tor (year_built is null and year_last_renovated is null)\n\t)\n    and (\n        (lower(title) not like '%adaptacij%' and lower(title) not like '%renovacij%' and lower(title) not like '%mansardni%')\n        or (lower(description) not like '%adaptacij%' and lower(description) not like '%renovacij%' and lower(description) not like '%mansardni%')\n\t)\n\tand flat_type = 'Stan u stambenoj zgradi'\n    and price > 50000\n    and price_m2 < 4000\n    and ((price <= 210000 and year_built < 2005) or (year_built >= 2005 and price <= 300000))\n    and (number_of_floors = 'Jednoeta\u017eni' or number_of_floors is null)\n    and location not like 'Sesvete%'\n    and location not like 'Podsljeme%'\n    and location not like 'Novi Zagreb - Zapad, Lu\u010dko'\n    order by first_seen desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.vw_new_ads_alert_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats_alerts", "name": "vw_new_ads_alert_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/alerts/vw_new_ads_alert_sales_flats.sql", "original_file_path": "models/sales_flats/alerts/vw_new_ads_alert_sales_flats.sql", "unique_id": "model.property_cro.vw_new_ads_alert_sales_flats", "fqn": ["property_cro", "sales_flats", "alerts", "vw_new_ads_alert_sales_flats"], "alias": "vw_new_ads", "checksum": {"name": "sha256", "checksum": "f3dd7b226cdd276da9c0ed2125bb5a05676cbebabe535fb5ffc31fd2bca5babb"}, "config": {"enabled": true, "alias": "vw_new_ads", "schema": "sales_flats_alerts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats_alerts", "alias": "vw_new_ads"}, "created_at": 1709473941.378847, "relation_name": "\"property_cro\".\"analytics_sales_flats_alerts\".\"vw_new_ads\"", "raw_code": "{{ config(materialized='view', schema='sales_flats_alerts', alias='vw_new_ads') }}\n\nselect\n       m1.location,\n       m1.title,\n       m1.link,\n       m1.flat_type,\n       m1.floor,\n       m1.size,\n       m1.price,\n       m1.first_price,\n       m1.current_price,\n       m1.num_seen,\n       m1.price_m2,\n       m1.area_price_m2,\n       m1.area_discount,\n       m1.area_sized_price_m2,\n       m1.area_sized_discount,\n       m1.area_aged_sized_price_m2,\n       m1.area_aged_sized_discount,\n       m1.price_drop_pecentage,\n       m1.first_seen,\n       m1.last_seen,\n       m1.ad_id,\n       m1.latest_seen_date,\n       m1.status,\n       m1.days_on_the_market,\n       m1.price_7,\n       m1.price_15,\n       m1.price_30,\n       m1.price_45,\n       m1.price_60,\n       m1.url,\n       m1.location2,\n       m1.street,\n       m1.num_views,\n       m1.apartment_type,\n       m1.number_of_floors,\n       m1.year_built,\n       m1.year_last_renovated,\n       m1.total_liveable_area,\n       m1.net_area,\n       m1.number_of_rooms,\n       m1.number_of_parking_spots,\n       m1.balcony_terrace,\n       m1.total_number_of_floors_in_building,\n       m1.furbishment_state,\n       m1.epc_rating,\n       m1.table_data,\n       m1.description,\n       m1.extra_description,\n       m1.seen_time,\n       m1.advertiser\nfrom {{ ref('4mv_enriched_ad_sales_flats') }} as m1\nwhere\n    m1.location in (select location from {{ ref('zagreb_locations') }})\n    and m1.floor like '%kat%'\n    and (\n        (m1.price between 100000 and 250000 and (m1.year_built is null or m1.year_built >= 1971))\n    )\n    and m1.price > 1000\n    and m1.first_seen between {{ dbt.current_timestamp() }}::date - INTERVAL '7 DAY' and {{ dbt.current_timestamp() }}::date\n    and m1.status = 'active'\norder by m1.first_seen desc", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "zagreb_locations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"], "nodes": ["model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.zagreb_locations"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/alerts/vw_new_ads_alert_sales_flats.sql", "compiled": true, "compiled_code": "\n\nselect\n       m1.location,\n       m1.title,\n       m1.link,\n       m1.flat_type,\n       m1.floor,\n       m1.size,\n       m1.price,\n       m1.first_price,\n       m1.current_price,\n       m1.num_seen,\n       m1.price_m2,\n       m1.area_price_m2,\n       m1.area_discount,\n       m1.area_sized_price_m2,\n       m1.area_sized_discount,\n       m1.area_aged_sized_price_m2,\n       m1.area_aged_sized_discount,\n       m1.price_drop_pecentage,\n       m1.first_seen,\n       m1.last_seen,\n       m1.ad_id,\n       m1.latest_seen_date,\n       m1.status,\n       m1.days_on_the_market,\n       m1.price_7,\n       m1.price_15,\n       m1.price_30,\n       m1.price_45,\n       m1.price_60,\n       m1.url,\n       m1.location2,\n       m1.street,\n       m1.num_views,\n       m1.apartment_type,\n       m1.number_of_floors,\n       m1.year_built,\n       m1.year_last_renovated,\n       m1.total_liveable_area,\n       m1.net_area,\n       m1.number_of_rooms,\n       m1.number_of_parking_spots,\n       m1.balcony_terrace,\n       m1.total_number_of_floors_in_building,\n       m1.furbishment_state,\n       m1.epc_rating,\n       m1.table_data,\n       m1.description,\n       m1.extra_description,\n       m1.seen_time,\n       m1.advertiser\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\" as m1\nwhere\n    m1.location in (select location from \"property_cro\".\"analytics_common\".\"zagreb_locations\")\n    and m1.floor like '%kat%'\n    and (\n        (m1.price between 100000 and 250000 and (m1.year_built is null or m1.year_built >= 1971))\n    )\n    and m1.price > 1000\n    and m1.first_seen between now()::date - INTERVAL '7 DAY' and now()::date\n    and m1.status = 'active'\norder by m1.first_seen desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.vw_large_price_drops_alert_sales_flats": {"database": "property_cro", "schema": "analytics_sales_flats_alerts", "name": "vw_large_price_drops_alert_sales_flats", "resource_type": "model", "package_name": "property_cro", "path": "sales_flats/alerts/vw_large_price_drops_alert_sales_flats.sql", "original_file_path": "models/sales_flats/alerts/vw_large_price_drops_alert_sales_flats.sql", "unique_id": "model.property_cro.vw_large_price_drops_alert_sales_flats", "fqn": ["property_cro", "sales_flats", "alerts", "vw_large_price_drops_alert_sales_flats"], "alias": "vw_large_price_drops", "checksum": {"name": "sha256", "checksum": "9516f8c1c8d2e1e1934a5f40755dc3025206f24d660fc8460fbade399ea4c4f2"}, "config": {"enabled": true, "alias": "vw_large_price_drops", "schema": "sales_flats_alerts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_flats_alerts", "alias": "vw_large_price_drops"}, "created_at": 1709473941.383182, "relation_name": "\"property_cro\".\"analytics_sales_flats_alerts\".\"vw_large_price_drops\"", "raw_code": "{{ config(materialized='view', schema='sales_flats_alerts', alias='vw_large_price_drops') }}\n\nselect location,\n       title,\n       link,\n       flat_type,\n       floor,\n       size,\n       price,\n       first_price,\n       current_price,\n       num_seen,\n       price_m2,\n       area_price_m2,\n       area_discount,\n       area_sized_price_m2,\n       area_aged_sized_price_m2,\n       price_drop_pecentage,\n       first_seen,\n       last_seen,\n       ad_id,\n       latest_seen_date,\n       status,\n       days_on_the_market,\n       price_3,\n       price_7,\n       price_15,\n       price_30,\n       price_45,\n       price_60,\n       url,\n       location2,\n       street,\n       num_views,\n       apartment_type,\n       number_of_floors,\n       year_built,\n       year_last_renovated,\n       total_liveable_area,\n       net_area,\n       number_of_rooms,\n       number_of_parking_spots,\n       balcony_terrace,\n       total_number_of_floors_in_building,\n       furbishment_state,\n       epc_rating,\n       table_data,\n       description,\n       extra_description,\n       seen_time,\n       advertiser\nfrom {{ ref('4mv_enriched_ad_sales_flats') }}\nwhere\n    location in (select location from {{ ref('zagreb_locations') }}) and\n    floor like '%kat%'\n    and size > 28\n    and size < 99\n    and current_price between 10000 and 210000\n    and current_price between 0.4 * first_price and 0.99 * first_price\n    and (\n        (location2 is null and price_m2 < area_price_m2 * 1.45)\n        or\n        (location2 is not null and\n            (\n                (year_built > 2000 and price_m2 < area_price_m2 * 1.6)\n                or\n                (year_built < 2000 and price_m2 < area_price_m2 * 1.5)\n            )\n            and (year_built is null or year_built > 1970)\n            and (floor is null or total_number_of_floors_in_building is null or floor_desc != total_number_of_floors_in_building::text)\n            and (description is null or lower(description) not like '%potkrovlj%' )\n        )\n    )\n    and (total_number_of_floors_in_building is null\n            or (floor_desc != total_number_of_floors_in_building::text and floor_desc is not null)\n    )\n    and flat_type = 'Stan u stambenoj zgradi'\n    and status = 'active'\norder by first_seen desc", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "zagreb_locations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.zagreb_locations"]}, "compiled_path": "target/compiled/property_cro/models/sales_flats/alerts/vw_large_price_drops_alert_sales_flats.sql", "compiled": true, "compiled_code": "\n\nselect location,\n       title,\n       link,\n       flat_type,\n       floor,\n       size,\n       price,\n       first_price,\n       current_price,\n       num_seen,\n       price_m2,\n       area_price_m2,\n       area_discount,\n       area_sized_price_m2,\n       area_aged_sized_price_m2,\n       price_drop_pecentage,\n       first_seen,\n       last_seen,\n       ad_id,\n       latest_seen_date,\n       status,\n       days_on_the_market,\n       price_3,\n       price_7,\n       price_15,\n       price_30,\n       price_45,\n       price_60,\n       url,\n       location2,\n       street,\n       num_views,\n       apartment_type,\n       number_of_floors,\n       year_built,\n       year_last_renovated,\n       total_liveable_area,\n       net_area,\n       number_of_rooms,\n       number_of_parking_spots,\n       balcony_terrace,\n       total_number_of_floors_in_building,\n       furbishment_state,\n       epc_rating,\n       table_data,\n       description,\n       extra_description,\n       seen_time,\n       advertiser\nfrom \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\nwhere\n    location in (select location from \"property_cro\".\"analytics_common\".\"zagreb_locations\") and\n    floor like '%kat%'\n    and size > 28\n    and size < 99\n    and current_price between 10000 and 210000\n    and current_price between 0.4 * first_price and 0.99 * first_price\n    and (\n        (location2 is null and price_m2 < area_price_m2 * 1.45)\n        or\n        (location2 is not null and\n            (\n                (year_built > 2000 and price_m2 < area_price_m2 * 1.6)\n                or\n                (year_built < 2000 and price_m2 < area_price_m2 * 1.5)\n            )\n            and (year_built is null or year_built > 1970)\n            and (floor is null or total_number_of_floors_in_building is null or floor_desc != total_number_of_floors_in_building::text)\n            and (description is null or lower(description) not like '%potkrovlj%' )\n        )\n    )\n    and (total_number_of_floors_in_building is null\n            or (floor_desc != total_number_of_floors_in_building::text and floor_desc is not null)\n    )\n    and flat_type = 'Stan u stambenoj zgradi'\n    and status = 'active'\norder by first_seen desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.3vw_avg_ask_px_per_loc_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats", "name": "3vw_avg_ask_px_per_loc_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/3vw_avg_ask_px_per_loc_rentals_flats.sql", "original_file_path": "models/rentals_flats/3vw_avg_ask_px_per_loc_rentals_flats.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_rentals_flats", "fqn": ["property_cro", "rentals_flats", "3vw_avg_ask_px_per_loc_rentals_flats"], "alias": "vw_avg_ask_px_per_loc", "checksum": {"name": "sha256", "checksum": "18bd986c288f1e0de8de42acd2bcfc9dc2ae9a6fd4830ba4f06d549230f36494"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc", "schema": "rentals_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "rentals_flats", "alias": "vw_avg_ask_px_per_loc"}, "created_at": 1709473941.3848279, "relation_name": "\"property_cro\".\"analytics_rentals_flats\".\"vw_avg_ask_px_per_loc\"", "raw_code": "{{ config(materialized='view', schema='rentals_flats', alias='vw_avg_ask_px_per_loc') }}\n\n{{ avg_px_per_loc_macro('2mv_price_history_rentals_flats', '360 DAY', '150') }}", "language": "sql", "refs": [{"name": "2mv_price_history_rentals_flats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_macro"], "nodes": ["model.property_cro.2mv_price_history_rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/3vw_avg_ask_px_per_loc_rentals_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct\n\tlocation,\n\tcount(ad_id) over (partition by location) as area_total_ads,\n\tavg(price/size) over (partition by location) as area_average\nfrom \"property_cro\".\"analytics_rentals_flats\".\"mv_price_history\"\nwhere last_seen > now()::date - INTERVAL '360 DAY'\n    and price > 150\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.4mv_enriched_ad_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats", "name": "4mv_enriched_ad_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/4mv_enriched_ad_rentals_flats.sql", "original_file_path": "models/rentals_flats/4mv_enriched_ad_rentals_flats.sql", "unique_id": "model.property_cro.4mv_enriched_ad_rentals_flats", "fqn": ["property_cro", "rentals_flats", "4mv_enriched_ad_rentals_flats"], "alias": "mv_enriched_ad", "checksum": {"name": "sha256", "checksum": "d9ada6aff7cebe7e4708029bb3251a97e2847e96645d01e404649fe57f51c3c4"}, "config": {"enabled": true, "alias": "mv_enriched_ad", "schema": "rentals_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "rentals_flats", "alias": "mv_enriched_ad"}, "created_at": 1709473941.38962, "relation_name": "\"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\"", "raw_code": "{{ config(materialized='table', schema='rentals_flats', alias='mv_enriched_ad') }}\n\nselect\n    {{ enriched_ads_base_col_select_macro('1') }}\n    sd.apartment_type,\n    case\n        when RIGHT(sd.total_number_of_floors_in_building, 1) like '.'\n            then SUBSTR(sd.total_number_of_floors_in_building, 1, LENGTH(sd.total_number_of_floors_in_building)-1)::integer\n        when lower(sd.total_number_of_floors_in_building) like '%prizemlje%'\n            then 1\n        when sd.total_number_of_floors_in_building like '25+'\n            then 25\n        else sd.total_number_of_floors_in_building::integer\n    end as total_number_of_floors_in_building\nfrom {{ ref('2mv_price_history_rentals_flats') }} s\njoin {{ ref('3vw_avg_ask_px_per_loc_rentals_flats') }}  a on s.location = a.location\nleft join {{ source('staging', 'rental_flat_desc') }} sd on s.ad_id = sd.ad_id\nleft join {{ ref('3vw_avg_ask_px_per_loc_size_rentals_flats') }} a2 on s.location = a2.location and FLOOR(s.size / 20) * 20 = a2.size\nleft join {{ ref('3vw_avg_ask_px_per_loc_year_size_rentals_flats') }} a3 on s.location = a3.location and FLOOR(s.size / 20) * 20 = a3.size and FLOOR(sd.year_built / 20) * 20 = a3.year_range", "language": "sql", "refs": [{"name": "2mv_price_history_rentals_flats", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_rentals_flats", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_size_rentals_flats", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_year_size_rentals_flats", "package": null, "version": null}], "sources": [["staging", "rental_flat_desc"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.enriched_ads_base_col_select_macro"], "nodes": ["source.property_cro.staging.rental_flat_desc", "model.property_cro.2mv_price_history_rentals_flats", "model.property_cro.3vw_avg_ask_px_per_loc_rentals_flats", "model.property_cro.3vw_avg_ask_px_per_loc_size_rentals_flats", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/4mv_enriched_ad_rentals_flats.sql", "compiled": true, "compiled_code": "\n\nselect\n    \n    s.location,\n    s.title,\n    s.link,\n    s.flat_type,\n    s.floor,\n    s.size,\n    s.price,\n    s.first_price,\n    s.current_price,\n    s.num_seen,\n    round((s.price/s.size)::numeric, 1) as price_m2,\n    round(a.area_average::numeric, 1) as area_price_m2,\n    round((100 * (a.area_average - s.price/s.size) / a.area_average)::numeric, 1) as area_discount,\n    round(a2.area_average::numeric, 1) as area_sized_price_m2,\n    round((100 * (a2.area_average - s.price/s.size) / a2.area_average)::numeric, 1) as area_sized_discount,\n    round(a3.area_average::numeric, 1) as area_aged_sized_price_m2,\n    round((100 * (a3.area_average - s.price/s.size) / a3.area_average)::numeric, 1)  as area_aged_sized_discount,\n    round(((s.first_price - s.price)/s.first_price * 100)::numeric, 1)  as price_drop_pecentage,\n    s.first_seen,\n    s.last_seen,\n    s.ad_id,\n    s.latest_seen_date,\n    s.status,\n    s.days_on_the_market,\n    s.price_3,\n    s.price_7,\n    s.price_15,\n    s.price_30,\n    s.price_45,\n    s.price_60,\n    sd.url,\n    sd.location2,\n    sd.street,\n    sd.num_views,\n    sd.advertiser,\n    sd.number_of_floors,\n    sd.year_built,\n    sd.year_last_renovated,\n    sd.total_liveable_area,\n    sd.net_area,\n    sd.number_of_rooms,\n    sd.number_of_parking_spots,\n    sd.balcony_terrace,\n    case when RIGHT(sd.floor, 1) like '.'\n        then SUBSTR(sd.floor, 1, LENGTH(sd.floor)-1)\n        else sd.floor\n    end as floor_desc,\n    sd.furbishment_state,\n    sd.epc_rating,\n    sd.table_data,\n    sd.description,\n    sd.extra_description,\n    sd.seen_time,\n\n    sd.apartment_type,\n    case\n        when RIGHT(sd.total_number_of_floors_in_building, 1) like '.'\n            then SUBSTR(sd.total_number_of_floors_in_building, 1, LENGTH(sd.total_number_of_floors_in_building)-1)::integer\n        when lower(sd.total_number_of_floors_in_building) like '%prizemlje%'\n            then 1\n        when sd.total_number_of_floors_in_building like '25+'\n            then 25\n        else sd.total_number_of_floors_in_building::integer\n    end as total_number_of_floors_in_building\nfrom \"property_cro\".\"analytics_rentals_flats\".\"mv_price_history\" s\njoin \"property_cro\".\"analytics_rentals_flats\".\"vw_avg_ask_px_per_loc\"  a on s.location = a.location\nleft join \"property_cro\".\"staging\".\"rental_flat_desc\" sd on s.ad_id = sd.ad_id\nleft join \"property_cro\".\"analytics_rentals_flats\".\"vw_avg_ask_px_per_loc_size\" a2 on s.location = a2.location and FLOOR(s.size / 20) * 20 = a2.size\nleft join \"property_cro\".\"analytics_rentals_flats\".\"vw_avg_ask_px_per_loc_year_size\" a3 on s.location = a3.location and FLOOR(s.size / 20) * 20 = a3.size and FLOOR(sd.year_built / 20) * 20 = a3.year_range", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.3vw_avg_ask_px_per_loc_year_size_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats", "name": "3vw_avg_ask_px_per_loc_year_size_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/3vw_avg_ask_px_per_loc_year_size_rentals_flats.sql", "original_file_path": "models/rentals_flats/3vw_avg_ask_px_per_loc_year_size_rentals_flats.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_year_size_rentals_flats", "fqn": ["property_cro", "rentals_flats", "3vw_avg_ask_px_per_loc_year_size_rentals_flats"], "alias": "vw_avg_ask_px_per_loc_year_size", "checksum": {"name": "sha256", "checksum": "8381b6ac0748c2edec2ba4676dd22d6d95e0c4a714684f083f0a39157d58f23d"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc_year_size", "schema": "rentals_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "rentals_flats", "alias": "vw_avg_ask_px_per_loc_year_size"}, "created_at": 1709473941.393975, "relation_name": "\"property_cro\".\"analytics_rentals_flats\".\"vw_avg_ask_px_per_loc_year_size\"", "raw_code": "{{ config(materialized='view', schema='rentals_flats', alias='vw_avg_ask_px_per_loc_year_size') }}\n\n{{ avg_px_per_loc_and_size_and_age_macro('2mv_price_history_rentals_flats', 'staging', 'rental_flat_desc', '360 DAY', '150') }}", "language": "sql", "refs": [{"name": "2mv_price_history_rentals_flats", "package": null, "version": null}], "sources": [["staging", "rental_flat_desc"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_and_size_and_age_macro"], "nodes": ["source.property_cro.staging.rental_flat_desc", "model.property_cro.2mv_price_history_rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/3vw_avg_ask_px_per_loc_year_size_rentals_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct\n\tlocation,\n    FLOOR(year_built / 20) * 20 as year_range,\n    FLOOR(size / 20) * 20 as size,\n\tcount(distinct vh.ad_id) area_total_ads,\n\tavg(price/size) as area_average\nfrom \"property_cro\".\"analytics_rentals_flats\".\"mv_price_history\" vh\njoin \"property_cro\".\"staging\".\"rental_flat_desc\" sd on vh.ad_id = sd.ad_id\nWHERE last_seen >=  now()::date - INTERVAL '360 DAY'\n    and year_built is not null and size is not null\n    and price > 150\ngroup by location, FLOOR(year_built / 20), FLOOR(size / 20)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.2mv_price_history_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats", "name": "2mv_price_history_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/2mv_price_history_rentals_flats.sql", "original_file_path": "models/rentals_flats/2mv_price_history_rentals_flats.sql", "unique_id": "model.property_cro.2mv_price_history_rentals_flats", "fqn": ["property_cro", "rentals_flats", "2mv_price_history_rentals_flats"], "alias": "mv_price_history", "checksum": {"name": "sha256", "checksum": "b6344cbcf20a59cc148152e8216a1f7b75432bd2a64c7b427fb7f06d20466e2b"}, "config": {"enabled": true, "alias": "mv_price_history", "schema": "rentals_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "rentals_flats", "alias": "mv_price_history"}, "created_at": 1709473941.398433, "relation_name": "\"property_cro\".\"analytics_rentals_flats\".\"mv_price_history\"", "raw_code": "{{ config(materialized='table', schema='rentals_flats', alias='mv_price_history') }}\n\n{{ price_history_macro('staging', 'rentals_flats', '1vw_last_ad_time_rentals_flats', '200', '10000', '2.5', '50') }}", "language": "sql", "refs": [{"name": "1vw_last_ad_time_rentals_flats", "package": null, "version": null}], "sources": [["staging", "rentals_flats"], ["staging", "rentals_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.price_history_macro"], "nodes": ["source.property_cro.staging.rentals_flats", "model.property_cro.1vw_last_ad_time_rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/2mv_price_history_rentals_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nwith t as (\n    select\n\t\tlas.ad_id,\n        t.last_seen,\n        t.first_seen,\n        price,\n        seen_date,\n        t.days_on_the_market,\n        t.status,\n        first_value(price) over (partition by las.ad_id order by seen_date desc range between UNBOUNDED preceding and unbounded following) as current_price,\n\t\tlast_value(price) over (partition by las.ad_id order by seen_date desc range between UNBOUNDED preceding and unbounded following) as first_price\n\tfrom \"property_cro\".\"staging\".\"rentals_flats\" las\n    join \"property_cro\".\"analytics_rentals_flats\".\"vw_last_ad_time\" as t\n        on las.ad_id = t.ad_id\n    where las.price between 200 and 10000\n),\nad_price_history as (\n    select\n        ad_id,\n        last_seen,\n        first_seen,\n        current_price,\n        first_price,\n        days_on_the_market,\n        status,\n        min(price) filter ( where seen_date <= t.last_seen - interval '60 day') as price_60,\n        min(price) filter ( where seen_date between t.last_seen - interval '60 day' and t.last_seen - interval '45 day') as price_45,\n        min(price) filter ( where seen_date between t.last_seen - interval '45 day' and t.last_seen - interval '30 day') as price_30,\n        min(price) filter ( where seen_date between t.last_seen - interval '30 day' and t.last_seen - interval '15 day') as price_15,\n        min(price) filter ( where seen_date between t.last_seen - interval '15 day' and t.last_seen - interval '7 day') as price_7,\n        min(price) filter ( where seen_date between t.last_seen - interval '7 day' and t.last_seen - interval '3 day') as price_3,\n        count(ad_id) as num_seen,\n        max(seen_date) as latest_seen_date\n    from t\n    group by ad_id, last_seen, first_seen, current_price, first_price, days_on_the_market, status\n), last_ad as (\n    select\n        ad.ad_id,\n        ad.seen_date,\n        ad.location,\n        ad.title,\n        ad.link,\n        ad.flat_type,\n        ad.floor,\n        ad.size,\n        ad.price\n    from (select row_number() over (partition by ad_id order by seen_time desc) as rown,\n                 *\n          from \"property_cro\".\"staging\".\"rentals_flats\") ad\n    where rown = 1\n)\nselect\n    ad.location,\n    ad.title,\n    ad.link,\n    ad.flat_type,\n    ad.floor,\n    ad.size,\n    ad.price,\n    aph.ad_id,\n    aph.last_seen,\n    aph.first_seen,\n    aph.current_price,\n    aph.first_price,\n    aph.price_60,\n    aph.price_45,\n    aph.price_30,\n    aph.price_15,\n    aph.price_7,\n    aph.price_3,\n    aph.num_seen,\n    aph.latest_seen_date,\n    aph.days_on_the_market,\n    aph.status\nfrom ad_price_history aph\njoin last_ad ad\n\ton aph.ad_id = ad.ad_id\n\tand aph.last_seen = ad.seen_date\nwhere (ad.price/ad.size) between 2.5 and 50\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.1vw_last_ad_time_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats", "name": "1vw_last_ad_time_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/1vw_last_ad_time_rentals_flats.sql", "original_file_path": "models/rentals_flats/1vw_last_ad_time_rentals_flats.sql", "unique_id": "model.property_cro.1vw_last_ad_time_rentals_flats", "fqn": ["property_cro", "rentals_flats", "1vw_last_ad_time_rentals_flats"], "alias": "vw_last_ad_time", "checksum": {"name": "sha256", "checksum": "bcd15bbfae915cfdce072b76199d5269253373f4951288a91a68a18929f55d51"}, "config": {"enabled": true, "alias": "vw_last_ad_time", "schema": "rentals_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "rentals_flats", "alias": "vw_last_ad_time"}, "created_at": 1709473941.402338, "relation_name": "\"property_cro\".\"analytics_rentals_flats\".\"vw_last_ad_time\"", "raw_code": "{{ config(materialized='view', schema='rentals_flats', alias='vw_last_ad_time') }}\n\n{{ last_ad_time_macro('staging', 'rentals_flats') }}", "language": "sql", "refs": [], "sources": [["staging", "rentals_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.last_ad_time_macro"], "nodes": ["source.property_cro.staging.rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/1vw_last_ad_time_rentals_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    ad_id,\n    min(seen_date) as first_seen,\n    max(seen_date) as last_seen,\n    case\n        when max(seen_date) < now()::date - INTERVAL '4 DAY'\n            then 'inactive'\n        else 'active'\n    end as status,\n    max(seen_date) - min(seen_date) as days_on_the_market\nfrom \"property_cro\".\"staging\".\"rentals_flats\"\ngroup by ad_id\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.3vw_avg_ask_px_per_loc_size_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats", "name": "3vw_avg_ask_px_per_loc_size_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/3vw_avg_ask_px_per_loc_size_rentals_flats.sql", "original_file_path": "models/rentals_flats/3vw_avg_ask_px_per_loc_size_rentals_flats.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_size_rentals_flats", "fqn": ["property_cro", "rentals_flats", "3vw_avg_ask_px_per_loc_size_rentals_flats"], "alias": "vw_avg_ask_px_per_loc_size", "checksum": {"name": "sha256", "checksum": "03b3de8f9a345ae51791cd89577d61bf5f09212a361404373781f9ecba8b63ef"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc_size", "schema": "rentals_flats", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "rentals_flats", "alias": "vw_avg_ask_px_per_loc_size"}, "created_at": 1709473941.406023, "relation_name": "\"property_cro\".\"analytics_rentals_flats\".\"vw_avg_ask_px_per_loc_size\"", "raw_code": "{{ config(materialized='view', schema='rentals_flats', alias='vw_avg_ask_px_per_loc_size') }}\n\n{{ avg_px_per_loc_and_size_macro('2mv_price_history_rentals_flats', '360 DAY', '150') }}", "language": "sql", "refs": [{"name": "2mv_price_history_rentals_flats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_and_size_macro"], "nodes": ["model.property_cro.2mv_price_history_rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/3vw_avg_ask_px_per_loc_size_rentals_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct \n\tlocation,\n    FLOOR(size / 20) * 20 as size,\n\tcount(distinct ad_id) area_total_ads,\n\tavg(price/size) as area_average\nfrom \"property_cro\".\"analytics_rentals_flats\".\"mv_price_history\"\nWHERE last_seen >  now()::date - INTERVAL '360 DAY'\n    and price > 150\ngroup by location, FLOOR(size / 20)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats_analysis", "name": "mv_inventory_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/analysis/mv_inventory_rentals_flats.sql", "original_file_path": "models/rentals_flats/analysis/mv_inventory_rentals_flats.sql", "unique_id": "model.property_cro.mv_inventory_rentals_flats", "fqn": ["property_cro", "rentals_flats", "analysis", "mv_inventory_rentals_flats"], "alias": "mv_inventory_rentals_flats", "checksum": {"name": "sha256", "checksum": "35ec40b3871a64c474e606ea1e92dfcca51901ca5efb29b95a6f861fdf46d84e"}, "config": {"enabled": true, "alias": "mv_inventory_rentals_flats", "schema": "rentals_flats_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "rentals_flats_analysis", "alias": "mv_inventory_rentals_flats"}, "created_at": 1709473941.4099169, "relation_name": "\"property_cro\".\"analytics_rentals_flats_analysis\".\"mv_inventory_rentals_flats\"", "raw_code": "{{ config(materialized='table', schema='rentals_flats_analysis', alias='mv_inventory_rentals_flats') }}\n\n{{ inventory_macro('4mv_enriched_ad_rentals_flats', 'staging', 'rentals_flats', '2mv_price_history_rentals_flats') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "2mv_price_history_rentals_flats", "package": null, "version": null}], "sources": [["staging", "rentals_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_macro"], "nodes": ["source.property_cro.staging.rentals_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.2mv_price_history_rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/analysis/mv_inventory_rentals_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select\n        date_trunc('month', first_seen) as year_month,\n        count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\"\n    where location in (select location from zg_loc)\n    group by date_trunc('month', first_seen)\n), sold_ads as (\n    select\n        date_trunc('month', last_seen) as year_month,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\"\n    where status = 'inactive' and location in (select location from zg_loc)\n    group by date_trunc('month', last_seen)\n), actives as (\n    select\n        date_trunc('month', seen_date) as year_month,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"rentals_flats\" s\n    join \"property_cro\".\"analytics_rentals_flats\".\"mv_price_history\" as hist2\n    on s.ad_id = hist2.ad_id\n    where s.location in (select location from zg_loc)\n    group by date_trunc('month', seen_date)\n)\nselect\n    n.year_month,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\n         join sold_ads r on n.year_month = r.year_month\n         join actives a on n.year_month = a.year_month\norder by n.year_month desc\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_general_location_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats_analysis", "name": "mv_inventory_general_location_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/analysis/mv_inventory_general_location_rentals_flats.sql", "original_file_path": "models/rentals_flats/analysis/mv_inventory_general_location_rentals_flats.sql", "unique_id": "model.property_cro.mv_inventory_general_location_rentals_flats", "fqn": ["property_cro", "rentals_flats", "analysis", "mv_inventory_general_location_rentals_flats"], "alias": "mv_inventory_general_location_rentals_flats", "checksum": {"name": "sha256", "checksum": "d5e6506cf329b595803e64ebd4fb6f733391dc37a6fcc32f2a1c53d90f6f8810"}, "config": {"enabled": true, "alias": "mv_inventory_general_location_rentals_flats", "schema": "rentals_flats_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "rentals_flats_analysis", "alias": "mv_inventory_general_location_rentals_flats"}, "created_at": 1709473941.415134, "relation_name": "\"property_cro\".\"analytics_rentals_flats_analysis\".\"mv_inventory_general_location_rentals_flats\"", "raw_code": "{{ config(materialized='table', schema='rentals_flats_analysis', alias='mv_inventory_general_location_rentals_flats') }}\n\n{{ inventory_per_general_location_macro('4mv_enriched_ad_rentals_flats', 'staging', 'rentals_flats', '2mv_price_history_rentals_flats') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "2mv_price_history_rentals_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}], "sources": [["staging", "rentals_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_per_general_location_macro"], "nodes": ["source.property_cro.staging.rentals_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.mv_date_to_quarter_mapping", "model.property_cro.2mv_price_history_rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/analysis/mv_inventory_general_location_rentals_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select quarter,\n           substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n           count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n           round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n           round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n           round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n           round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d on first_seen = date_\n    where location in (select location from zg_loc)\n    group by d.quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n), sold_ads as (\n    select\n        quarter,\n        substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on s.first_seen = d.date_\n    where status = 'inactive'\n        and location in (select location from zg_loc)\n    group by d.quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n), actives as (\n    select\n        d.quarter,\n        substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"rentals_flats\" s\n    join \"property_cro\".\"analytics_rentals_flats\".\"mv_price_history\" as hist2\n        on s.ad_id = hist2.ad_id\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on seen_date = date_\n    where s.location in (select location from zg_loc)\n    group by quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n)\nselect\n    a.quarter as year_month,\n    a.location,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\njoin sold_ads r on n.quarter = r.quarter and n.location = r.location\njoin actives a on n.quarter = a.quarter and n.location = a.location\norder by n.quarter desc\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_location_rentals_flats": {"database": "property_cro", "schema": "analytics_rentals_flats_analysis", "name": "mv_inventory_location_rentals_flats", "resource_type": "model", "package_name": "property_cro", "path": "rentals_flats/analysis/mv_inventory_location_rentals_flats.sql", "original_file_path": "models/rentals_flats/analysis/mv_inventory_location_rentals_flats.sql", "unique_id": "model.property_cro.mv_inventory_location_rentals_flats", "fqn": ["property_cro", "rentals_flats", "analysis", "mv_inventory_location_rentals_flats"], "alias": "mv_inventory_location_rentals_flats", "checksum": {"name": "sha256", "checksum": "35f08b5e8ff262da124e0b914efb5b79ee63cb21d84dd2b7e4f495126977ff3f"}, "config": {"enabled": true, "alias": "mv_inventory_location_rentals_flats", "schema": "rentals_flats_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "rentals_flats_analysis", "alias": "mv_inventory_location_rentals_flats"}, "created_at": 1709473941.418945, "relation_name": "\"property_cro\".\"analytics_rentals_flats_analysis\".\"mv_inventory_location_rentals_flats\"", "raw_code": "{{ config(materialized='table', schema='rentals_flats_analysis', alias='mv_inventory_location_rentals_flats') }}\n\n{{ inventory_per_location_macro('4mv_enriched_ad_rentals_flats', 'staging', 'rentals_flats', '2mv_price_history_rentals_flats') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "2mv_price_history_rentals_flats", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}], "sources": [["staging", "rentals_flats"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_per_location_macro"], "nodes": ["source.property_cro.staging.rentals_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.mv_date_to_quarter_mapping", "model.property_cro.2mv_price_history_rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/rentals_flats/analysis/mv_inventory_location_rentals_flats.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select quarter,\n           s.location,\n           count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n           round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n           round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n           round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n           round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d on first_seen = date_\n    where location in (select location from zg_loc)\n    group by d.quarter, s.location\n), sold_ads as (\n    select\n        quarter,\n        s.location,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on s.first_seen = d.date_\n    where status = 'inactive'\n        and location in (select location from zg_loc)\n    group by d.quarter, s.location\n), actives as (\n    select\n        d.quarter,\n        s.location,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"rentals_flats\" s\n    join \"property_cro\".\"analytics_rentals_flats\".\"mv_price_history\" as hist2\n        on s.ad_id = hist2.ad_id\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on seen_date = date_\n    where s.location in (select location from zg_loc)\n    group by quarter, s.location\n)\nselect\n    a.quarter as year_month,\n    a.location,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\njoin sold_ads r on n.quarter = r.quarter and n.location = r.location\njoin actives a on n.quarter = a.quarter and n.location = a.location\norder by n.quarter desc\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_date_to_quarter_mapping": {"database": "property_cro", "schema": "analytics_common", "name": "mv_date_to_quarter_mapping", "resource_type": "model", "package_name": "property_cro", "path": "common/mv_date_to_quarter_mapping.sql", "original_file_path": "models/common/mv_date_to_quarter_mapping.sql", "unique_id": "model.property_cro.mv_date_to_quarter_mapping", "fqn": ["property_cro", "common", "mv_date_to_quarter_mapping"], "alias": "mv_date_to_quarter_mapping", "checksum": {"name": "sha256", "checksum": "48351a3dacf4bc6de7510cb2d9ee7148f1208678b83396712bba593a669174c4"}, "config": {"enabled": true, "alias": "mv_date_to_quarter_mapping", "schema": "common", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "common", "alias": "mv_date_to_quarter_mapping"}, "created_at": 1709473941.4226072, "relation_name": "\"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\"", "raw_code": "{{ config(materialized='table', schema='common', alias='mv_date_to_quarter_mapping') }}\n\n\n{{ date_to_quarter_mapping_macro() }}\n\n-- maps date to relevant quarter, eg.\n-- date_, quarter\n-- 2021-04-09,2021-05-15\n-- 2021-04-22,2021-05-15\n-- 2021-04-30,2021-05-15\n-- 2021-05-12,2021-05-15\n-- 2021-06-08,2021-08-14\n-- 2021-06-10,2021-08-14\n-- 2021-06-19,2021-08-14\n-- 2021-07-21,2021-08-14\n-- 2021-07-30,2021-08-14", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.property_cro.date_to_quarter_mapping_macro"], "nodes": []}, "compiled_path": "target/compiled/property_cro/models/common/mv_date_to_quarter_mapping.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith quarterly as (\n    SELECT current_date - 91 * sequence.day AS quarter\n    FROM generate_series(0, 50) AS sequence(day)\n), daily as (\n    select current_date - sequence.day AS date_\n    from generate_series(0,4550) AS sequence(day)\n), joined as (\n    select\n        date_, quarter,\n        ROW_NUMBER() OVER (PARTITION BY date_ ORDER BY abs(date_ - quarter)) as rn\n    from quarterly q\n             join daily d\n                  on q.quarter > d.date_\n)\nselect date_, quarter\nfrom joined\nwhere rn = 1\n\n\n\n-- maps date to relevant quarter, eg.\n-- date_, quarter\n-- 2021-04-09,2021-05-15\n-- 2021-04-22,2021-05-15\n-- 2021-04-30,2021-05-15\n-- 2021-05-12,2021-05-15\n-- 2021-06-08,2021-08-14\n-- 2021-06-10,2021-08-14\n-- 2021-06-19,2021-08-14\n-- 2021-07-21,2021-08-14\n-- 2021-07-30,2021-08-14", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.ad_price_history_agg": {"database": "property_cro", "schema": "analytics_common", "name": "ad_price_history_agg", "resource_type": "model", "package_name": "property_cro", "path": "common/ad_price_history_agg.sql", "original_file_path": "models/common/ad_price_history_agg.sql", "unique_id": "model.property_cro.ad_price_history_agg", "fqn": ["property_cro", "common", "ad_price_history_agg"], "alias": "ad_price_history_agg", "checksum": {"name": "sha256", "checksum": "dc8aa21eec1b67519d223512dbb3124c9e9a063b5dfb2fa7e23de871dc49fed7"}, "config": {"enabled": true, "alias": "ad_price_history_agg", "schema": "common", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "\n\n  \n\n  \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "common", "alias": "ad_price_history_agg", "post-hook": ["\n\n  \n\n  \n"]}, "created_at": 1709473941.4272141, "relation_name": "\"property_cro\".\"analytics_common\".\"ad_price_history_agg\"", "raw_code": "{% if \"postgres\" in target.name %}\n\n{{ config(materialized='table', schema='common', alias='ad_price_history_agg', post_hook=update_target_table_from_source('analytics_common.ad_price_history_agg', 'public.ad_price_history_agg_api')) }}\n\nselect\n    apha.ad_id,\n    apha.price_change_history,\n    apha.created_at,\n    apha.version,\n    dets.price_m2 as price_sqm,\n    dets.area_sized_price_m2 as area_sized_price_sqm,\n    dets.year_built,\n    case\n        when (floor_desc is null or floor_desc like '') and (total_number_of_floors_in_building is null or total_number_of_floors_in_building like '')\n            then ''\n        when (floor_desc is not null and floor_desc <> '') and (total_number_of_floors_in_building is null or total_number_of_floors_in_building like '')\n            then floor_desc\n        when (floor_desc is null or floor_desc like '') and (total_number_of_floors_in_building is not null and total_number_of_floors_in_building <> '')\n            then total_number_of_floors_in_building || ' katova'\n        when (floor_desc is not null and floor_desc <> '') and (total_number_of_floors_in_building is not null and total_number_of_floors_in_building <> '')\n            then floor_desc || ' / ' || total_number_of_floors_in_building\n        end as floor,\n    dets.advertiser,\n    dets.days_on_the_market\nfrom (\n         select\n             aph.ad_id,\n             json_agg(change_date || '|' || price_old || '|' || price_new order by change_date) as price_change_history,\n             current_timestamp(0) as created_at,\n             1 as version\n         from {{ ref('ad_price_history')}} aph\n         where aph.price_new like '%\u20ac%'\n         group by aph.ad_id\n     ) apha\n         left join (\n    select ad_id, price_m2, area_sized_price_m2, year_built, total_number_of_floors_in_building::varchar, advertiser, coalesce(floor_desc, replace(floor, 'kat',''))::varchar as floor_desc, days_on_the_market  from {{ ref('4mv_enriched_ad_sales_flats') }}\n    union all\n    select ad_id, price_m2, area_sized_price_m2, year_built, total_number_of_floors_in_building::varchar, advertiser, coalesce(floor_desc, replace(floor, 'kat',''))::varchar as floor_desc, days_on_the_market from {{ ref('4mv_enriched_ad_rentals_flats') }}\n    union all\n    select ad_id, price_m2, area_sized_price_m2, year_built, total_number_of_floors_in_building::varchar, advertiser, coalesce(floor_desc, replace(floor, 'kat',''))::varchar as floor_desc, days_on_the_market from {{ ref('4mv_enriched_ad_sales_houses') }}\n) dets on apha.ad_id = dets.ad_id\n\n{%- else -%} select '1' as skipped_table\n\n{% endif %}", "language": "sql", "refs": [{"name": "ad_price_history", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.property_cro.update_target_table_from_source"], "nodes": ["model.property_cro.ad_price_history", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.4mv_enriched_ad_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/common/ad_price_history_agg.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    apha.ad_id,\n    apha.price_change_history,\n    apha.created_at,\n    apha.version,\n    dets.price_m2 as price_sqm,\n    dets.area_sized_price_m2 as area_sized_price_sqm,\n    dets.year_built,\n    case\n        when (floor_desc is null or floor_desc like '') and (total_number_of_floors_in_building is null or total_number_of_floors_in_building like '')\n            then ''\n        when (floor_desc is not null and floor_desc <> '') and (total_number_of_floors_in_building is null or total_number_of_floors_in_building like '')\n            then floor_desc\n        when (floor_desc is null or floor_desc like '') and (total_number_of_floors_in_building is not null and total_number_of_floors_in_building <> '')\n            then total_number_of_floors_in_building || ' katova'\n        when (floor_desc is not null and floor_desc <> '') and (total_number_of_floors_in_building is not null and total_number_of_floors_in_building <> '')\n            then floor_desc || ' / ' || total_number_of_floors_in_building\n        end as floor,\n    dets.advertiser,\n    dets.days_on_the_market\nfrom (\n         select\n             aph.ad_id,\n             json_agg(change_date || '|' || price_old || '|' || price_new order by change_date) as price_change_history,\n             current_timestamp(0) as created_at,\n             1 as version\n         from \"property_cro\".\"analytics_common\".\"ad_price_history\" aph\n         where aph.price_new like '%\u20ac%'\n         group by aph.ad_id\n     ) apha\n         left join (\n    select ad_id, price_m2, area_sized_price_m2, year_built, total_number_of_floors_in_building::varchar, advertiser, coalesce(floor_desc, replace(floor, 'kat',''))::varchar as floor_desc, days_on_the_market  from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\"\n    union all\n    select ad_id, price_m2, area_sized_price_m2, year_built, total_number_of_floors_in_building::varchar, advertiser, coalesce(floor_desc, replace(floor, 'kat',''))::varchar as floor_desc, days_on_the_market from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\"\n    union all\n    select ad_id, price_m2, area_sized_price_m2, year_built, total_number_of_floors_in_building::varchar, advertiser, coalesce(floor_desc, replace(floor, 'kat',''))::varchar as floor_desc, days_on_the_market from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\"\n) dets on apha.ad_id = dets.ad_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.ad_price_history": {"database": "property_cro", "schema": "analytics_common", "name": "ad_price_history", "resource_type": "model", "package_name": "property_cro", "path": "common/ad_price_history.sql", "original_file_path": "models/common/ad_price_history.sql", "unique_id": "model.property_cro.ad_price_history", "fqn": ["property_cro", "common", "ad_price_history"], "alias": "ad_price_history", "checksum": {"name": "sha256", "checksum": "d38ea76be90f34ff50b1755047f696ac819ab2f2c058a930db7cb7dfb64211c3"}, "config": {"enabled": true, "alias": "ad_price_history", "schema": "common", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "common", "alias": "ad_price_history"}, "created_at": 1709473941.43762, "relation_name": "\"property_cro\".\"analytics_common\".\"ad_price_history\"", "raw_code": "{{ config(materialized='table', schema='common', alias='ad_price_history') }}\n\nwith cte as (\n    select\n        seen_date, ad_id, price, type,\n        row_number() over (partition by ad_id order by seen_date) as row_number\n    from (\n        select seen_date, ad_id, price, 'sales_flats' as type from {{ source('staging', 'sales_flats') }} union all\n        select seen_date, ad_id, price, 'sales_houses' as type from {{ source('staging', 'sales_houses') }} union all\n        select seen_date, ad_id, price, 'rentals_flats' as type from {{ source('staging', 'rentals_flats') }}\n    ) a\n), cte2 as (\n    select b1.seen_date as sd_old, b1.ad_id as ad_id_old, b1.price as price_old, b1.row_number as rn_old,\n           b2.seen_date as sd_new, b2.ad_id as ad_id_new, b2.price as price_new, b2.row_number as rn_new, b1.type\n    from cte as b1\n    left join cte as b2\n        on b1.ad_id = b2.ad_id and b1.row_number = b2.row_number - 1\n)\nselect\n    ad_id_old as ad_id, type,\n    case when rn_old = 1 then 'first_seen'\n        when sd_new is null then 'last_seen'\n        when price_new <= 0.99 * price_old or price_new >= 1.01 * price_old then 'px_chg'\n    end as price_change_reason,\n    case when rn_old = 1 then sd_old\n        when sd_new is null then sd_old\n        when price_new <= 0.99 * price_old or price_new >= 1.01 * price_old then sd_new\n    end as change_date,\n    case when rn_old = 1 then 'first'\n        when sd_new is null then ('\u20ac' || round(price_old::numeric,0)::varchar)\n        when price_new <= 0.99 * price_old or price_new >= 1.01 * price_old then ('\u20ac' || round(price_old::numeric, 0)::varchar)\n    end as price_old,\n    case when rn_old = 1 then ('\u20ac' || round(price_old::numeric,0)::varchar)\n        when sd_new is null then 'current'\n        when price_new <= 0.99 * price_old or price_new >= 1.01 * price_old then ('\u20ac' || round(price_new::numeric, 0)::varchar)\n    end as price_new\nfrom cte2\nwhere rn_old = 1 -- first price\n    or sd_new is null -- last price -- decided to remove this for the time being\n    or price_new <= 0.99 * price_old or price_new >= 1.01 * price_old", "language": "sql", "refs": [], "sources": [["staging", "sales_houses"], ["staging", "sales_flats"], ["staging", "rentals_flats"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.property_cro.staging.sales_houses", "source.property_cro.staging.sales_flats", "source.property_cro.staging.rentals_flats"]}, "compiled_path": "target/compiled/property_cro/models/common/ad_price_history.sql", "compiled": true, "compiled_code": "\n\nwith cte as (\n    select\n        seen_date, ad_id, price, type,\n        row_number() over (partition by ad_id order by seen_date) as row_number\n    from (\n        select seen_date, ad_id, price, 'sales_flats' as type from \"property_cro\".\"staging\".\"sales_flats\" union all\n        select seen_date, ad_id, price, 'sales_houses' as type from \"property_cro\".\"staging\".\"sales_houses\" union all\n        select seen_date, ad_id, price, 'rentals_flats' as type from \"property_cro\".\"staging\".\"rentals_flats\"\n    ) a\n), cte2 as (\n    select b1.seen_date as sd_old, b1.ad_id as ad_id_old, b1.price as price_old, b1.row_number as rn_old,\n           b2.seen_date as sd_new, b2.ad_id as ad_id_new, b2.price as price_new, b2.row_number as rn_new, b1.type\n    from cte as b1\n    left join cte as b2\n        on b1.ad_id = b2.ad_id and b1.row_number = b2.row_number - 1\n)\nselect\n    ad_id_old as ad_id, type,\n    case when rn_old = 1 then 'first_seen'\n        when sd_new is null then 'last_seen'\n        when price_new <= 0.99 * price_old or price_new >= 1.01 * price_old then 'px_chg'\n    end as price_change_reason,\n    case when rn_old = 1 then sd_old\n        when sd_new is null then sd_old\n        when price_new <= 0.99 * price_old or price_new >= 1.01 * price_old then sd_new\n    end as change_date,\n    case when rn_old = 1 then 'first'\n        when sd_new is null then ('\u20ac' || round(price_old::numeric,0)::varchar)\n        when price_new <= 0.99 * price_old or price_new >= 1.01 * price_old then ('\u20ac' || round(price_old::numeric, 0)::varchar)\n    end as price_old,\n    case when rn_old = 1 then ('\u20ac' || round(price_old::numeric,0)::varchar)\n        when sd_new is null then 'current'\n        when price_new <= 0.99 * price_old or price_new >= 1.01 * price_old then ('\u20ac' || round(price_new::numeric, 0)::varchar)\n    end as price_new\nfrom cte2\nwhere rn_old = 1 -- first price\n    or sd_new is null -- last price -- decided to remove this for the time being\n    or price_new <= 0.99 * price_old or price_new >= 1.01 * price_old", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.price_changes_per_week": {"database": "property_cro", "schema": "analytics_common", "name": "price_changes_per_week", "resource_type": "model", "package_name": "property_cro", "path": "common/price_changes_per_week.sql", "original_file_path": "models/common/price_changes_per_week.sql", "unique_id": "model.property_cro.price_changes_per_week", "fqn": ["property_cro", "common", "price_changes_per_week"], "alias": "ad_price_changes_per_week", "checksum": {"name": "sha256", "checksum": "97e1d12a9c054e1a8358ad099dd16c8ecb8441c4dee359a54338d1d844fe32d1"}, "config": {"enabled": true, "alias": "ad_price_changes_per_week", "schema": "common", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "common", "alias": "ad_price_changes_per_week"}, "created_at": 1709473941.439103, "relation_name": "\"property_cro\".\"analytics_common\".\"ad_price_changes_per_week\"", "raw_code": "{{ config(materialized='table', schema='common', alias='ad_price_changes_per_week') }}\n\nwith t1 as (\n    select\n        apha.*,\n        case\n            when price_old > price_new then 'price_drop'\n            when price_old < price_new then 'price_rise'\n            else 'same_price'\n            end as price_change_type,\n            (price_new/dets.size - price_old/dets.size) / (price_old/dets.size) as price_change\n    from (\n        select\n            ltrim(price_new,'\u20ac')::int as price_new,\n            ltrim(price_old,'\u20ac')::int as price_old,\n            type,\n            change_date,\n            ad_id,\n            price_change_reason\n        from {{ ref('ad_price_history') }}\n    ) apha\n    left join (\n        select ad_id, size from {{ ref('4mv_enriched_ad_sales_flats') }} union all\n        select ad_id, size from {{ ref('4mv_enriched_ad_rentals_flats') }} union all\n        select ad_id, size from {{ ref('4mv_enriched_ad_sales_houses') }}\n    ) dets on apha.ad_id = dets.ad_id\n    where price_old > 100 and price_new > 100 and price_change_reason = 'px_chg'\n)\nselect\n    count(distinct ad_id),\n    round(avg(price_change)::numeric,2) as avg_price_change,\n    type,\n    price_change_type,\n    date_trunc('week', change_date::date)::date as change_week\nfrom t1\nwhere price_change < 1\ngroup by\n    type,\n    price_change_type,\n    date_trunc('week', change_date::date)\norder by change_week desc", "language": "sql", "refs": [{"name": "ad_price_history", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_rentals_flats", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.property_cro.ad_price_history", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.4mv_enriched_ad_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/common/price_changes_per_week.sql", "compiled": true, "compiled_code": "\n\nwith t1 as (\n    select\n        apha.*,\n        case\n            when price_old > price_new then 'price_drop'\n            when price_old < price_new then 'price_rise'\n            else 'same_price'\n            end as price_change_type,\n            (price_new/dets.size - price_old/dets.size) / (price_old/dets.size) as price_change\n    from (\n        select\n            ltrim(price_new,'\u20ac')::int as price_new,\n            ltrim(price_old,'\u20ac')::int as price_old,\n            type,\n            change_date,\n            ad_id,\n            price_change_reason\n        from \"property_cro\".\"analytics_common\".\"ad_price_history\"\n    ) apha\n    left join (\n        select ad_id, size from \"property_cro\".\"analytics_sales_flats\".\"mv_enriched_ad\" union all\n        select ad_id, size from \"property_cro\".\"analytics_rentals_flats\".\"mv_enriched_ad\" union all\n        select ad_id, size from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\"\n    ) dets on apha.ad_id = dets.ad_id\n    where price_old > 100 and price_new > 100 and price_change_reason = 'px_chg'\n)\nselect\n    count(distinct ad_id),\n    round(avg(price_change)::numeric,2) as avg_price_change,\n    type,\n    price_change_type,\n    date_trunc('week', change_date::date)::date as change_week\nfrom t1\nwhere price_change < 1\ngroup by\n    type,\n    price_change_type,\n    date_trunc('week', change_date::date)\norder by change_week desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.zagreb_locations": {"database": "property_cro", "schema": "analytics_common", "name": "zagreb_locations", "resource_type": "model", "package_name": "property_cro", "path": "common/zagreb_locations.sql", "original_file_path": "models/common/zagreb_locations.sql", "unique_id": "model.property_cro.zagreb_locations", "fqn": ["property_cro", "common", "zagreb_locations"], "alias": "zagreb_locations", "checksum": {"name": "sha256", "checksum": "26bf1815eaa7f4f766dba91b0b3e5ebdba1ecd717c94da3a415abdac4f61e3c8"}, "config": {"enabled": true, "alias": "zagreb_locations", "schema": "common", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "common", "alias": "zagreb_locations"}, "created_at": 1709473941.440635, "relation_name": "\"property_cro\".\"analytics_common\".\"zagreb_locations\"", "raw_code": "{{ config(materialized='table', schema='common', alias='zagreb_locations') }}\n\nselect 'Donji Grad, Donji grad' as location union all\nselect 'Dubrava, Dubrava' as location union all\nselect 'Gornja Dubrava, Gornja Dubrava' as location union all\nselect 'Gornja Dubrava, Poljanice' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Britanac' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Centar' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Dolac' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Gornji grad' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Gup\u010deva zvijezda' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Kaptol' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Kraljevec' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Ksaver' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Medve\u0161\u010dak' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Mirogoj' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Pantov\u010dak' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Prekri\u017eje' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Ribnjak' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Tu\u0161kanac' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Vo\u0107arsko naselje' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Zelengaj' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, \u0160alata' as location union all\nselect 'Maksimir, Maksimir' as location union all\nselect 'Maksimir, Ravnice' as location union all\nselect 'Maksimir, Svetice' as location union all\nselect 'Novi Zagreb - Istok, Bundek' as location union all\nselect 'Novi Zagreb - Istok, Dugave' as location union all\nselect 'Novi Zagreb - Istok, Sopot' as location union all\nselect 'Novi Zagreb - Istok, Sredi\u0161\u0107e' as location union all\nselect 'Novi Zagreb - Istok, Travno' as location union all\nselect 'Novi Zagreb - Istok, Utrina' as location union all\nselect 'Novi Zagreb - Istok, Zapru\u0111e' as location union all\nselect 'Novi Zagreb - Zapad, Kajzerica' as location union all\nselect 'Novi Zagreb - Zapad, Lani\u0161te' as location union all\nselect 'Novi Zagreb - Zapad, Siget' as location union all\nselect 'Novi Zagreb - Zapad, Trnsko' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Borovje' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Donje Svetice' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Dubec' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Feren\u0161\u010dica' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Folnegovi\u0107evo naselje' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Savica - \u0160anci' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Volov\u010dica' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Vukomerec' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, \u017ditnjak' as location union all\nselect 'Podsljeme, Dolje' as location union all\nselect 'Podsljeme, Gra\u010dani' as location union all\nselect 'Podsljeme, Mlinovi' as location union all\nselect 'Podsljeme, \u0160estine' as location union all\nselect 'Stenjevec, Male\u0161nica' as location union all\nselect 'Stenjevec, Stenjevec' as location union all\nselect 'Stenjevec, \u0160pansko' as location union all\nselect 'Tre\u0161njevka - Jug, Gajevo' as location union all\nselect 'Tre\u0161njevka - Jug, Gredice' as location union all\nselect 'Tre\u0161njevka - Jug, Horvati' as location union all\nselect 'Tre\u0161njevka - Jug, Jarun' as location union all\nselect 'Tre\u0161njevka - Jug, Kne\u017eija' as location union all\nselect 'Tre\u0161njevka - Jug, Pre\u010dko' as location union all\nselect 'Tre\u0161njevka - Jug, Srednjaci' as location union all\nselect 'Tre\u0161njevka - Jug, Stagli\u0161\u0107e' as location union all\nselect 'Tre\u0161njevka - Jug, Vrbani' as location union all\nselect 'Tre\u0161njevka - Sjever, Tre\u0161njevka' as location union all\nselect 'Trnje, Cvjetno naselje' as location union all\nselect 'Trnje, Kanal' as location union all\nselect 'Trnje, Kruge' as location union all\nselect 'Trnje, Martinovka' as location union all\nselect 'Trnje, Savica' as location union all\nselect 'Trnje, Sige\u010dica' as location union all\nselect 'Trnje, Trnje' as location union all\nselect 'Trnje, Vrbik' as location union all\nselect '\u010crnomerec, Bijenik' as location union all\nselect '\u010crnomerec, Sveti Duh' as location union all\nselect '\u010crnomerec, \u010crnomerec' as location", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/property_cro/models/common/zagreb_locations.sql", "compiled": true, "compiled_code": "\n\nselect 'Donji Grad, Donji grad' as location union all\nselect 'Dubrava, Dubrava' as location union all\nselect 'Gornja Dubrava, Gornja Dubrava' as location union all\nselect 'Gornja Dubrava, Poljanice' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Britanac' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Centar' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Dolac' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Gornji grad' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Gup\u010deva zvijezda' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Kaptol' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Kraljevec' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Ksaver' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Medve\u0161\u010dak' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Mirogoj' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Pantov\u010dak' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Prekri\u017eje' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Ribnjak' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Tu\u0161kanac' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Vo\u0107arsko naselje' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, Zelengaj' as location union all\nselect 'Gornji Grad - Medve\u0161\u010dak, \u0160alata' as location union all\nselect 'Maksimir, Maksimir' as location union all\nselect 'Maksimir, Ravnice' as location union all\nselect 'Maksimir, Svetice' as location union all\nselect 'Novi Zagreb - Istok, Bundek' as location union all\nselect 'Novi Zagreb - Istok, Dugave' as location union all\nselect 'Novi Zagreb - Istok, Sopot' as location union all\nselect 'Novi Zagreb - Istok, Sredi\u0161\u0107e' as location union all\nselect 'Novi Zagreb - Istok, Travno' as location union all\nselect 'Novi Zagreb - Istok, Utrina' as location union all\nselect 'Novi Zagreb - Istok, Zapru\u0111e' as location union all\nselect 'Novi Zagreb - Zapad, Kajzerica' as location union all\nselect 'Novi Zagreb - Zapad, Lani\u0161te' as location union all\nselect 'Novi Zagreb - Zapad, Siget' as location union all\nselect 'Novi Zagreb - Zapad, Trnsko' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Borovje' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Donje Svetice' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Dubec' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Feren\u0161\u010dica' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Folnegovi\u0107evo naselje' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Savica - \u0160anci' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Volov\u010dica' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, Vukomerec' as location union all\nselect 'Pe\u0161\u010denica - \u017ditnjak, \u017ditnjak' as location union all\nselect 'Podsljeme, Dolje' as location union all\nselect 'Podsljeme, Gra\u010dani' as location union all\nselect 'Podsljeme, Mlinovi' as location union all\nselect 'Podsljeme, \u0160estine' as location union all\nselect 'Stenjevec, Male\u0161nica' as location union all\nselect 'Stenjevec, Stenjevec' as location union all\nselect 'Stenjevec, \u0160pansko' as location union all\nselect 'Tre\u0161njevka - Jug, Gajevo' as location union all\nselect 'Tre\u0161njevka - Jug, Gredice' as location union all\nselect 'Tre\u0161njevka - Jug, Horvati' as location union all\nselect 'Tre\u0161njevka - Jug, Jarun' as location union all\nselect 'Tre\u0161njevka - Jug, Kne\u017eija' as location union all\nselect 'Tre\u0161njevka - Jug, Pre\u010dko' as location union all\nselect 'Tre\u0161njevka - Jug, Srednjaci' as location union all\nselect 'Tre\u0161njevka - Jug, Stagli\u0161\u0107e' as location union all\nselect 'Tre\u0161njevka - Jug, Vrbani' as location union all\nselect 'Tre\u0161njevka - Sjever, Tre\u0161njevka' as location union all\nselect 'Trnje, Cvjetno naselje' as location union all\nselect 'Trnje, Kanal' as location union all\nselect 'Trnje, Kruge' as location union all\nselect 'Trnje, Martinovka' as location union all\nselect 'Trnje, Savica' as location union all\nselect 'Trnje, Sige\u010dica' as location union all\nselect 'Trnje, Trnje' as location union all\nselect 'Trnje, Vrbik' as location union all\nselect '\u010crnomerec, Bijenik' as location union all\nselect '\u010crnomerec, Sveti Duh' as location union all\nselect '\u010crnomerec, \u010crnomerec' as location", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.2mv_price_history_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses", "name": "2mv_price_history_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/2mv_price_history_sales_houses.sql", "original_file_path": "models/sales_houses/2mv_price_history_sales_houses.sql", "unique_id": "model.property_cro.2mv_price_history_sales_houses", "fqn": ["property_cro", "sales_houses", "2mv_price_history_sales_houses"], "alias": "mv_price_history", "checksum": {"name": "sha256", "checksum": "92be7e3f31adf94810cdd24b5c30d973f3a9146c74ed76ed1ee7905cbdca0b9c"}, "config": {"enabled": true, "alias": "mv_price_history", "schema": "sales_houses", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_houses", "alias": "mv_price_history"}, "created_at": 1709473941.4421859, "relation_name": "\"property_cro\".\"analytics_sales_houses\".\"mv_price_history\"", "raw_code": "{{ config(materialized='table', schema='sales_houses', alias='mv_price_history') }}\n\n{{ price_history_macro('staging', 'sales_houses', '1vw_last_ad_time_sales_houses', '10000', '1000000', '50', '10000') }}", "language": "sql", "refs": [{"name": "1vw_last_ad_time_sales_houses", "package": null, "version": null}], "sources": [["staging", "sales_houses"], ["staging", "sales_houses"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.price_history_macro"], "nodes": ["source.property_cro.staging.sales_houses", "model.property_cro.1vw_last_ad_time_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/2mv_price_history_sales_houses.sql", "compiled": true, "compiled_code": "\n\n\n\nwith t as (\n    select\n\t\tlas.ad_id,\n        t.last_seen,\n        t.first_seen,\n        price,\n        seen_date,\n        t.days_on_the_market,\n        t.status,\n        first_value(price) over (partition by las.ad_id order by seen_date desc range between UNBOUNDED preceding and unbounded following) as current_price,\n\t\tlast_value(price) over (partition by las.ad_id order by seen_date desc range between UNBOUNDED preceding and unbounded following) as first_price\n\tfrom \"property_cro\".\"staging\".\"sales_houses\" las\n    join \"property_cro\".\"analytics_sales_houses\".\"vw_last_ad_time\" as t\n        on las.ad_id = t.ad_id\n    where las.price between 10000 and 1000000\n),\nad_price_history as (\n    select\n        ad_id,\n        last_seen,\n        first_seen,\n        current_price,\n        first_price,\n        days_on_the_market,\n        status,\n        min(price) filter ( where seen_date <= t.last_seen - interval '60 day') as price_60,\n        min(price) filter ( where seen_date between t.last_seen - interval '60 day' and t.last_seen - interval '45 day') as price_45,\n        min(price) filter ( where seen_date between t.last_seen - interval '45 day' and t.last_seen - interval '30 day') as price_30,\n        min(price) filter ( where seen_date between t.last_seen - interval '30 day' and t.last_seen - interval '15 day') as price_15,\n        min(price) filter ( where seen_date between t.last_seen - interval '15 day' and t.last_seen - interval '7 day') as price_7,\n        min(price) filter ( where seen_date between t.last_seen - interval '7 day' and t.last_seen - interval '3 day') as price_3,\n        count(ad_id) as num_seen,\n        max(seen_date) as latest_seen_date\n    from t\n    group by ad_id, last_seen, first_seen, current_price, first_price, days_on_the_market, status\n), last_ad as (\n    select\n        ad.ad_id,\n        ad.seen_date,\n        ad.location,\n        ad.title,\n        ad.link,\n        ad.flat_type,\n        ad.floor,\n        ad.size,\n        ad.price\n    from (select row_number() over (partition by ad_id order by seen_time desc) as rown,\n                 *\n          from \"property_cro\".\"staging\".\"sales_houses\") ad\n    where rown = 1\n)\nselect\n    ad.location,\n    ad.title,\n    ad.link,\n    ad.flat_type,\n    ad.floor,\n    ad.size,\n    ad.price,\n    aph.ad_id,\n    aph.last_seen,\n    aph.first_seen,\n    aph.current_price,\n    aph.first_price,\n    aph.price_60,\n    aph.price_45,\n    aph.price_30,\n    aph.price_15,\n    aph.price_7,\n    aph.price_3,\n    aph.num_seen,\n    aph.latest_seen_date,\n    aph.days_on_the_market,\n    aph.status\nfrom ad_price_history aph\njoin last_ad ad\n\ton aph.ad_id = ad.ad_id\n\tand aph.last_seen = ad.seen_date\nwhere (ad.price/ad.size) between 50 and 10000\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.4mv_enriched_ad_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses", "name": "4mv_enriched_ad_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/4mv_enriched_ad_sales_houses.sql", "original_file_path": "models/sales_houses/4mv_enriched_ad_sales_houses.sql", "unique_id": "model.property_cro.4mv_enriched_ad_sales_houses", "fqn": ["property_cro", "sales_houses", "4mv_enriched_ad_sales_houses"], "alias": "mv_enriched_ad", "checksum": {"name": "sha256", "checksum": "85a4a5941dfeade705076986f1531ae73a64c9defaf6a85878a6462f0411ce65"}, "config": {"enabled": true, "alias": "mv_enriched_ad", "schema": "sales_houses", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_houses", "alias": "mv_enriched_ad"}, "created_at": 1709473941.4465432, "relation_name": "\"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\"", "raw_code": "{{ config(materialized='table', schema='sales_houses', alias='mv_enriched_ad') }}\n\nselect\n    {{ enriched_ads_base_col_select_macro('0') }}\n    sd.building_type,\n    sd.house_type,\n    sd.total_number_of_floors_in_building\nfrom {{ ref('2mv_price_history_sales_houses')}} s\njoin {{ ref('3vw_avg_ask_px_per_loc_sales_houses')}}  a on s.location = a.location\nleft join {{ source('staging', 'sale_house_desc') }} sd on s.ad_id = sd.ad_id\nleft join {{ ref('3vw_avg_ask_px_per_loc_size_sales_houses')}} a2 on s.location = a2.location and FLOOR(s.size / 20) * 20 = a2.size\nleft join {{ ref('3vw_avg_ask_px_per_loc_year_size_sales_houses')}} a3 on s.location = a3.location and FLOOR(s.size / 20) * 20 = a3.size and FLOOR(sd.year_built / 20) * 20 = a3.year_range", "language": "sql", "refs": [{"name": "2mv_price_history_sales_houses", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_sales_houses", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_size_sales_houses", "package": null, "version": null}, {"name": "3vw_avg_ask_px_per_loc_year_size_sales_houses", "package": null, "version": null}], "sources": [["staging", "sale_house_desc"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.enriched_ads_base_col_select_macro"], "nodes": ["source.property_cro.staging.sale_house_desc", "model.property_cro.2mv_price_history_sales_houses", "model.property_cro.3vw_avg_ask_px_per_loc_sales_houses", "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_houses", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/4mv_enriched_ad_sales_houses.sql", "compiled": true, "compiled_code": "\n\nselect\n    \n    s.location,\n    s.title,\n    s.link,\n    s.flat_type,\n    s.floor,\n    s.size,\n    s.price,\n    s.first_price,\n    s.current_price,\n    s.num_seen,\n    round((s.price/s.size)::numeric, 0) as price_m2,\n    round(a.area_average::numeric, 0) as area_price_m2,\n    round((100 * (a.area_average - s.price/s.size) / a.area_average)::numeric, 1) as area_discount,\n    round(a2.area_average::numeric, 0) as area_sized_price_m2,\n    round((100 * (a2.area_average - s.price/s.size) / a2.area_average)::numeric, 1) as area_sized_discount,\n    round(a3.area_average::numeric, 0) as area_aged_sized_price_m2,\n    round((100 * (a3.area_average - s.price/s.size) / a3.area_average)::numeric, 1)  as area_aged_sized_discount,\n    round(((s.first_price - s.price)/s.first_price * 100)::numeric, 1)  as price_drop_pecentage,\n    s.first_seen,\n    s.last_seen,\n    s.ad_id,\n    s.latest_seen_date,\n    s.status,\n    s.days_on_the_market,\n    s.price_3,\n    s.price_7,\n    s.price_15,\n    s.price_30,\n    s.price_45,\n    s.price_60,\n    sd.url,\n    sd.location2,\n    sd.street,\n    sd.num_views,\n    sd.advertiser,\n    sd.number_of_floors,\n    sd.year_built,\n    sd.year_last_renovated,\n    sd.total_liveable_area,\n    sd.net_area,\n    sd.number_of_rooms,\n    sd.number_of_parking_spots,\n    sd.balcony_terrace,\n    case when RIGHT(sd.floor, 1) like '.'\n        then SUBSTR(sd.floor, 1, LENGTH(sd.floor)-1)\n        else sd.floor\n    end as floor_desc,\n    sd.furbishment_state,\n    sd.epc_rating,\n    sd.table_data,\n    sd.description,\n    sd.extra_description,\n    sd.seen_time,\n\n    sd.building_type,\n    sd.house_type,\n    sd.total_number_of_floors_in_building\nfrom \"property_cro\".\"analytics_sales_houses\".\"mv_price_history\" s\njoin \"property_cro\".\"analytics_sales_houses\".\"vw_avg_ask_px_per_loc\"  a on s.location = a.location\nleft join \"property_cro\".\"staging\".\"sale_house_desc\" sd on s.ad_id = sd.ad_id\nleft join \"property_cro\".\"analytics_sales_houses\".\"vw_avg_ask_px_per_loc_size\" a2 on s.location = a2.location and FLOOR(s.size / 20) * 20 = a2.size\nleft join \"property_cro\".\"analytics_sales_houses\".\"vw_avg_ask_px_per_loc_year_size\" a3 on s.location = a3.location and FLOOR(s.size / 20) * 20 = a3.size and FLOOR(sd.year_built / 20) * 20 = a3.year_range", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.1vw_last_ad_time_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses", "name": "1vw_last_ad_time_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/1vw_last_ad_time_sales_houses.sql", "original_file_path": "models/sales_houses/1vw_last_ad_time_sales_houses.sql", "unique_id": "model.property_cro.1vw_last_ad_time_sales_houses", "fqn": ["property_cro", "sales_houses", "1vw_last_ad_time_sales_houses"], "alias": "vw_last_ad_time", "checksum": {"name": "sha256", "checksum": "392c83a9d51cac4158bcaf175492f59ce9c1d2c58bd7d4c1213f3b6e2395dd11"}, "config": {"enabled": true, "alias": "vw_last_ad_time", "schema": "sales_houses", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_houses", "alias": "vw_last_ad_time"}, "created_at": 1709473941.451941, "relation_name": "\"property_cro\".\"analytics_sales_houses\".\"vw_last_ad_time\"", "raw_code": "{{ config(materialized='view', schema='sales_houses', alias='vw_last_ad_time') }}\n\n{{ last_ad_time_macro('staging', 'sales_houses') }}", "language": "sql", "refs": [], "sources": [["staging", "sales_houses"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.last_ad_time_macro"], "nodes": ["source.property_cro.staging.sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/1vw_last_ad_time_sales_houses.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    ad_id,\n    min(seen_date) as first_seen,\n    max(seen_date) as last_seen,\n    case\n        when max(seen_date) < now()::date - INTERVAL '4 DAY'\n            then 'inactive'\n        else 'active'\n    end as status,\n    max(seen_date) - min(seen_date) as days_on_the_market\nfrom \"property_cro\".\"staging\".\"sales_houses\"\ngroup by ad_id\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.3vw_avg_ask_px_per_loc_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses", "name": "3vw_avg_ask_px_per_loc_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/3vw_avg_ask_px_per_loc_sales_houses.sql", "original_file_path": "models/sales_houses/3vw_avg_ask_px_per_loc_sales_houses.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_sales_houses", "fqn": ["property_cro", "sales_houses", "3vw_avg_ask_px_per_loc_sales_houses"], "alias": "vw_avg_ask_px_per_loc", "checksum": {"name": "sha256", "checksum": "35f36341235ced0b50aaab68cc033dfc3549b22e352db9778bfbe56475ea2da1"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc", "schema": "sales_houses", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_houses", "alias": "vw_avg_ask_px_per_loc"}, "created_at": 1709473941.455541, "relation_name": "\"property_cro\".\"analytics_sales_houses\".\"vw_avg_ask_px_per_loc\"", "raw_code": "{{ config(materialized='view', schema='sales_houses', alias='vw_avg_ask_px_per_loc') }}\n\n{{ avg_px_per_loc_macro('2mv_price_history_sales_houses', '270 DAY', '30000') }}", "language": "sql", "refs": [{"name": "2mv_price_history_sales_houses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_macro"], "nodes": ["model.property_cro.2mv_price_history_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/3vw_avg_ask_px_per_loc_sales_houses.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct\n\tlocation,\n\tcount(ad_id) over (partition by location) as area_total_ads,\n\tavg(price/size) over (partition by location) as area_average\nfrom \"property_cro\".\"analytics_sales_houses\".\"mv_price_history\"\nwhere last_seen > now()::date - INTERVAL '270 DAY'\n    and price > 30000\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses", "name": "3vw_avg_ask_px_per_loc_year_size_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/3vw_avg_ask_px_per_loc_year_size_sales_houses.sql", "original_file_path": "models/sales_houses/3vw_avg_ask_px_per_loc_year_size_sales_houses.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_houses", "fqn": ["property_cro", "sales_houses", "3vw_avg_ask_px_per_loc_year_size_sales_houses"], "alias": "vw_avg_ask_px_per_loc_year_size", "checksum": {"name": "sha256", "checksum": "7d2b933ad0fe8eb25f882e421cf1d0ad85242e90b342d23b05f4e47a7a7bd5fe"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc_year_size", "schema": "sales_houses", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_houses", "alias": "vw_avg_ask_px_per_loc_year_size"}, "created_at": 1709473941.4594061, "relation_name": "\"property_cro\".\"analytics_sales_houses\".\"vw_avg_ask_px_per_loc_year_size\"", "raw_code": "{{ config(materialized='view', schema='sales_houses', alias='vw_avg_ask_px_per_loc_year_size') }}\n\n{{ avg_px_per_loc_and_size_and_age_macro('2mv_price_history_sales_houses', 'staging', 'sale_house_desc', '270 DAY', '30000') }}", "language": "sql", "refs": [{"name": "2mv_price_history_sales_houses", "package": null, "version": null}], "sources": [["staging", "sale_house_desc"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_and_size_and_age_macro"], "nodes": ["source.property_cro.staging.sale_house_desc", "model.property_cro.2mv_price_history_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/3vw_avg_ask_px_per_loc_year_size_sales_houses.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct\n\tlocation,\n    FLOOR(year_built / 20) * 20 as year_range,\n    FLOOR(size / 20) * 20 as size,\n\tcount(distinct vh.ad_id) area_total_ads,\n\tavg(price/size) as area_average\nfrom \"property_cro\".\"analytics_sales_houses\".\"mv_price_history\" vh\njoin \"property_cro\".\"staging\".\"sale_house_desc\" sd on vh.ad_id = sd.ad_id\nWHERE last_seen >=  now()::date - INTERVAL '270 DAY'\n    and year_built is not null and size is not null\n    and price > 30000\ngroup by location, FLOOR(year_built / 20), FLOOR(size / 20)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses", "name": "3vw_avg_ask_px_per_loc_size_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/3vw_avg_ask_px_per_loc_size_sales_houses.sql", "original_file_path": "models/sales_houses/3vw_avg_ask_px_per_loc_size_sales_houses.sql", "unique_id": "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_houses", "fqn": ["property_cro", "sales_houses", "3vw_avg_ask_px_per_loc_size_sales_houses"], "alias": "vw_avg_ask_px_per_loc_size", "checksum": {"name": "sha256", "checksum": "05bb14129f7320f7b51afbb917dc304eff26fee89d09eba34e05435b23a78b98"}, "config": {"enabled": true, "alias": "vw_avg_ask_px_per_loc_size", "schema": "sales_houses", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_houses", "alias": "vw_avg_ask_px_per_loc_size"}, "created_at": 1709473941.463312, "relation_name": "\"property_cro\".\"analytics_sales_houses\".\"vw_avg_ask_px_per_loc_size\"", "raw_code": "{{ config(materialized='view', schema='sales_houses', alias='vw_avg_ask_px_per_loc_size') }}\n\n{{ avg_px_per_loc_and_size_macro('2mv_price_history_sales_houses', '270 DAY', '30000') }}", "language": "sql", "refs": [{"name": "2mv_price_history_sales_houses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.property_cro.avg_px_per_loc_and_size_macro"], "nodes": ["model.property_cro.2mv_price_history_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/3vw_avg_ask_px_per_loc_size_sales_houses.sql", "compiled": true, "compiled_code": "\n\n\n\nselect distinct \n\tlocation,\n    FLOOR(size / 20) * 20 as size,\n\tcount(distinct ad_id) area_total_ads,\n\tavg(price/size) as area_average\nfrom \"property_cro\".\"analytics_sales_houses\".\"mv_price_history\"\nWHERE last_seen >  now()::date - INTERVAL '270 DAY'\n    and price > 30000\ngroup by location, FLOOR(size / 20)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_location_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses_analysis", "name": "mv_inventory_location_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/analysis/mv_inventory_location_sales_houses.sql", "original_file_path": "models/sales_houses/analysis/mv_inventory_location_sales_houses.sql", "unique_id": "model.property_cro.mv_inventory_location_sales_houses", "fqn": ["property_cro", "sales_houses", "analysis", "mv_inventory_location_sales_houses"], "alias": "mv_inventory_location_sales_houses", "checksum": {"name": "sha256", "checksum": "091fe8430fe9fb9df30a562174187dcc83184c7a7872b6bfe4ab8fc220ba30c5"}, "config": {"enabled": true, "alias": "mv_inventory_location_sales_houses", "schema": "sales_houses_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_houses_analysis", "alias": "mv_inventory_location_sales_houses"}, "created_at": 1709473941.4673312, "relation_name": "\"property_cro\".\"analytics_sales_houses_analysis\".\"mv_inventory_location_sales_houses\"", "raw_code": "{{ config(materialized='table', schema='sales_houses_analysis', alias='mv_inventory_location_sales_houses') }}\n\n{{ inventory_per_location_macro('4mv_enriched_ad_sales_houses', 'staging', 'sales_houses', '2mv_price_history_sales_houses') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "2mv_price_history_sales_houses", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}], "sources": [["staging", "sales_houses"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_per_location_macro"], "nodes": ["source.property_cro.staging.sales_houses", "model.property_cro.4mv_enriched_ad_sales_houses", "model.property_cro.mv_date_to_quarter_mapping", "model.property_cro.2mv_price_history_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/analysis/mv_inventory_location_sales_houses.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select quarter,\n           s.location,\n           count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n           round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n           round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n           round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n           round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d on first_seen = date_\n    where location in (select location from zg_loc)\n    group by d.quarter, s.location\n), sold_ads as (\n    select\n        quarter,\n        s.location,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on s.first_seen = d.date_\n    where status = 'inactive'\n        and location in (select location from zg_loc)\n    group by d.quarter, s.location\n), actives as (\n    select\n        d.quarter,\n        s.location,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"sales_houses\" s\n    join \"property_cro\".\"analytics_sales_houses\".\"mv_price_history\" as hist2\n        on s.ad_id = hist2.ad_id\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on seen_date = date_\n    where s.location in (select location from zg_loc)\n    group by quarter, s.location\n)\nselect\n    a.quarter as year_month,\n    a.location,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\njoin sold_ads r on n.quarter = r.quarter and n.location = r.location\njoin actives a on n.quarter = a.quarter and n.location = a.location\norder by n.quarter desc\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses_analysis", "name": "mv_inventory_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/analysis/mv_inventory_sales_houses.sql", "original_file_path": "models/sales_houses/analysis/mv_inventory_sales_houses.sql", "unique_id": "model.property_cro.mv_inventory_sales_houses", "fqn": ["property_cro", "sales_houses", "analysis", "mv_inventory_sales_houses"], "alias": "mv_inventory_sales_houses", "checksum": {"name": "sha256", "checksum": "0e5f23fb8b752715e6d57f88291d095566d48455f42a2dd548b20be19a21dcb2"}, "config": {"enabled": true, "alias": "mv_inventory_sales_houses", "schema": "sales_houses_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_houses_analysis", "alias": "mv_inventory_sales_houses"}, "created_at": 1709473941.4724858, "relation_name": "\"property_cro\".\"analytics_sales_houses_analysis\".\"mv_inventory_sales_houses\"", "raw_code": "{{ config(materialized='table', schema='sales_houses_analysis', alias='mv_inventory_sales_houses') }}\n\n{{ inventory_macro('4mv_enriched_ad_sales_houses', 'staging', 'sales_houses', '2mv_price_history_sales_houses') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "2mv_price_history_sales_houses", "package": null, "version": null}], "sources": [["staging", "sales_houses"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_macro"], "nodes": ["source.property_cro.staging.sales_houses", "model.property_cro.4mv_enriched_ad_sales_houses", "model.property_cro.2mv_price_history_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/analysis/mv_inventory_sales_houses.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select\n        date_trunc('month', first_seen) as year_month,\n        count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\"\n    where location in (select location from zg_loc)\n    group by date_trunc('month', first_seen)\n), sold_ads as (\n    select\n        date_trunc('month', last_seen) as year_month,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\"\n    where status = 'inactive' and location in (select location from zg_loc)\n    group by date_trunc('month', last_seen)\n), actives as (\n    select\n        date_trunc('month', seen_date) as year_month,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"sales_houses\" s\n    join \"property_cro\".\"analytics_sales_houses\".\"mv_price_history\" as hist2\n    on s.ad_id = hist2.ad_id\n    where s.location in (select location from zg_loc)\n    group by date_trunc('month', seen_date)\n)\nselect\n    n.year_month,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\n         join sold_ads r on n.year_month = r.year_month\n         join actives a on n.year_month = a.year_month\norder by n.year_month desc\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.mv_inventory_general_location_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses_analysis", "name": "mv_inventory_general_location_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/analysis/mv_inventory_general_location_sales_houses.sql", "original_file_path": "models/sales_houses/analysis/mv_inventory_general_location_sales_houses.sql", "unique_id": "model.property_cro.mv_inventory_general_location_sales_houses", "fqn": ["property_cro", "sales_houses", "analysis", "mv_inventory_general_location_sales_houses"], "alias": "mv_inventory_general_location_sales_houses", "checksum": {"name": "sha256", "checksum": "f036eb24378261e96c827ca3eca1054bc725fdcc8716c697f44676da9ec4c64f"}, "config": {"enabled": true, "alias": "mv_inventory_general_location_sales_houses", "schema": "sales_houses_analysis", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "sales_houses_analysis", "alias": "mv_inventory_general_location_sales_houses"}, "created_at": 1709473941.476408, "relation_name": "\"property_cro\".\"analytics_sales_houses_analysis\".\"mv_inventory_general_location_sales_houses\"", "raw_code": "{{ config(materialized='table', schema='sales_houses_analysis', alias='mv_inventory_general_location_sales_houses') }}\n\n{{ inventory_per_general_location_macro('4mv_enriched_ad_sales_houses', 'staging', 'sales_houses', '2mv_price_history_sales_houses') }}", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}, {"name": "2mv_price_history_sales_houses", "package": null, "version": null}, {"name": "mv_date_to_quarter_mapping", "package": null, "version": null}], "sources": [["staging", "sales_houses"]], "metrics": [], "depends_on": {"macros": ["macro.property_cro.inventory_per_general_location_macro"], "nodes": ["source.property_cro.staging.sales_houses", "model.property_cro.4mv_enriched_ad_sales_houses", "model.property_cro.mv_date_to_quarter_mapping", "model.property_cro.2mv_price_history_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/analysis/mv_inventory_general_location_sales_houses.sql", "compiled": true, "compiled_code": "\n\n\n\nwith zg_loc as (\n    select distinct location from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\"\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select quarter,\n           substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n           count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n           round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n           round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n           round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n           round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d on first_seen = date_\n    where location in (select location from zg_loc)\n    group by d.quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n), sold_ads as (\n    select\n        quarter,\n        substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\" s\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on s.first_seen = d.date_\n    where status = 'inactive'\n        and location in (select location from zg_loc)\n    group by d.quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n), actives as (\n    select\n        d.quarter,\n        substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from \"property_cro\".\"staging\".\"sales_houses\" s\n    join \"property_cro\".\"analytics_sales_houses\".\"mv_price_history\" as hist2\n        on s.ad_id = hist2.ad_id\n    join \"property_cro\".\"analytics_common\".\"mv_date_to_quarter_mapping\" d\n        on seen_date = date_\n    where s.location in (select location from zg_loc)\n    group by quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n)\nselect\n    a.quarter as year_month,\n    a.location,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\njoin sold_ads r on n.quarter = r.quarter and n.location = r.location\njoin actives a on n.quarter = a.quarter and n.location = a.location\norder by n.quarter desc\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.vw_new_ads_alert_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses_alerts", "name": "vw_new_ads_alert_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/alerts/vw_new_ads_alert_sales_houses.sql", "original_file_path": "models/sales_houses/alerts/vw_new_ads_alert_sales_houses.sql", "unique_id": "model.property_cro.vw_new_ads_alert_sales_houses", "fqn": ["property_cro", "sales_houses", "alerts", "vw_new_ads_alert_sales_houses"], "alias": "vw_new_ads", "checksum": {"name": "sha256", "checksum": "9f6caa8d4ca7a6956409ca6f840ac8f858a570632f9abe123484e2d9de72bec0"}, "config": {"enabled": true, "alias": "vw_new_ads", "schema": "sales_houses_alerts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_houses_alerts", "alias": "vw_new_ads"}, "created_at": 1709473941.4802291, "relation_name": "\"property_cro\".\"analytics_sales_houses_alerts\".\"vw_new_ads\"", "raw_code": "{{ config(materialized='view', schema='sales_houses_alerts', alias='vw_new_ads') }}\n\nselect\n       m1.location,\n       m1.title,\n       m1.link,\n       m1.flat_type,\n       m1.floor,\n       m1.size,\n       m1.price,\n       m1.first_price,\n       m1.current_price,\n       m1.num_seen,\n       m1.price_m2,\n       m1.area_price_m2,\n       m1.area_discount,\n       m1.area_sized_price_m2,\n       m1.area_sized_discount,\n       m1.area_aged_sized_price_m2,\n       m1.area_aged_sized_discount,\n       m1.price_drop_pecentage,\n       m1.first_seen,\n       m1.last_seen,\n       m1.ad_id,\n       m1.latest_seen_date,\n       m1.status,\n       m1.days_on_the_market,\n       m1.price_7,\n       m1.price_15,\n       m1.price_30,\n       m1.price_45,\n       m1.price_60,\n       m1.url,\n       m1.location2,\n       m1.street,\n       m1.num_views,\n       m1.building_type,\n       m1.house_type,\n       m1.number_of_floors,\n       m1.year_built,\n       m1.year_last_renovated,\n       m1.total_liveable_area,\n       m1.net_area,\n       m1.number_of_rooms,\n       m1.number_of_parking_spots,\n       m1.balcony_terrace,\n       m1.total_number_of_floors_in_building,\n       m1.furbishment_state,\n       m1.epc_rating,\n       m1.table_data,\n       m1.description,\n       m1.extra_description,\n       m1.seen_time,\n       m1.advertiser\nfrom {{ ref('4mv_enriched_ad_sales_houses')}} as m1\nwhere price <= 200000\n    and price_m2 <= 1750\n    and price_m2 > 300\n    and size < 200\n    and (year_built is null or year_built >= 2003)\n    and (year_last_renovated is null or year_last_renovated > 2000)\n--     and number_of_floors not in ('Prizemnica','Visoka prizemnica')\n--     and total_number_of_floors_in_building not in ('Prizemnica','Visoka prizemnica')\n    and coalesce(furbishment_state,'') not in ('Za renoviranje','Roh-bau')\n    and lower(description) not like '%roh bau%'\n    and lower(description) not like '%roh-bau%'\n    and location2 not in ('Grad Zagreb, Pe\u0161\u010denica - \u017ditnjak, Kozari put')\n    and m1.price > 1000\n    {# and m1.status = 'active' #}\n    and m1.first_seen between {{ dbt.current_timestamp() }}::date - INTERVAL '120 DAY' and {{ dbt.current_timestamp() }}::date\n--     and (\n--         (lower(advertiser) not like '%nekretnin%' and lower(advertiser) not like '%agencij%'\n--              and lower(advertiser) not like '%real estate%' and lower(advertiser) not like '%d.o.o.%'\n--              and lower(advertiser) not like '%d.d.%'\n--           and lower(advertiser) not in ('opereta', 'eurovilla d.o.o.', 'aps', 'b2 kapital d.o.o.', 'stan grad immobilien'))\n--         or lower(title) like '%bez provizije%'\n--         or lower(description) like '%bez provizije%'\n--     )\norder by m1.first_seen desc", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"], "nodes": ["model.property_cro.4mv_enriched_ad_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/alerts/vw_new_ads_alert_sales_houses.sql", "compiled": true, "compiled_code": "\n\nselect\n       m1.location,\n       m1.title,\n       m1.link,\n       m1.flat_type,\n       m1.floor,\n       m1.size,\n       m1.price,\n       m1.first_price,\n       m1.current_price,\n       m1.num_seen,\n       m1.price_m2,\n       m1.area_price_m2,\n       m1.area_discount,\n       m1.area_sized_price_m2,\n       m1.area_sized_discount,\n       m1.area_aged_sized_price_m2,\n       m1.area_aged_sized_discount,\n       m1.price_drop_pecentage,\n       m1.first_seen,\n       m1.last_seen,\n       m1.ad_id,\n       m1.latest_seen_date,\n       m1.status,\n       m1.days_on_the_market,\n       m1.price_7,\n       m1.price_15,\n       m1.price_30,\n       m1.price_45,\n       m1.price_60,\n       m1.url,\n       m1.location2,\n       m1.street,\n       m1.num_views,\n       m1.building_type,\n       m1.house_type,\n       m1.number_of_floors,\n       m1.year_built,\n       m1.year_last_renovated,\n       m1.total_liveable_area,\n       m1.net_area,\n       m1.number_of_rooms,\n       m1.number_of_parking_spots,\n       m1.balcony_terrace,\n       m1.total_number_of_floors_in_building,\n       m1.furbishment_state,\n       m1.epc_rating,\n       m1.table_data,\n       m1.description,\n       m1.extra_description,\n       m1.seen_time,\n       m1.advertiser\nfrom \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\" as m1\nwhere price <= 200000\n    and price_m2 <= 1750\n    and price_m2 > 300\n    and size < 200\n    and (year_built is null or year_built >= 2003)\n    and (year_last_renovated is null or year_last_renovated > 2000)\n--     and number_of_floors not in ('Prizemnica','Visoka prizemnica')\n--     and total_number_of_floors_in_building not in ('Prizemnica','Visoka prizemnica')\n    and coalesce(furbishment_state,'') not in ('Za renoviranje','Roh-bau')\n    and lower(description) not like '%roh bau%'\n    and lower(description) not like '%roh-bau%'\n    and location2 not in ('Grad Zagreb, Pe\u0161\u010denica - \u017ditnjak, Kozari put')\n    and m1.price > 1000\n    \n    and m1.first_seen between now()::date - INTERVAL '120 DAY' and now()::date\n--     and (\n--         (lower(advertiser) not like '%nekretnin%' and lower(advertiser) not like '%agencij%'\n--              and lower(advertiser) not like '%real estate%' and lower(advertiser) not like '%d.o.o.%'\n--              and lower(advertiser) not like '%d.d.%'\n--           and lower(advertiser) not in ('opereta', 'eurovilla d.o.o.', 'aps', 'b2 kapital d.o.o.', 'stan grad immobilien'))\n--         or lower(title) like '%bez provizije%'\n--         or lower(description) like '%bez provizije%'\n--     )\norder by m1.first_seen desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.property_cro.vw_price_drops_alert_sales_houses": {"database": "property_cro", "schema": "analytics_sales_houses_alerts", "name": "vw_price_drops_alert_sales_houses", "resource_type": "model", "package_name": "property_cro", "path": "sales_houses/alerts/vw_price_drops_alert_sales_houses.sql", "original_file_path": "models/sales_houses/alerts/vw_price_drops_alert_sales_houses.sql", "unique_id": "model.property_cro.vw_price_drops_alert_sales_houses", "fqn": ["property_cro", "sales_houses", "alerts", "vw_price_drops_alert_sales_houses"], "alias": "vw_price_drops", "checksum": {"name": "sha256", "checksum": "b0e63ea64ee23e97857666d4676a3108b919f3a0ec15158a1dc5fbec1f2d5296"}, "config": {"enabled": true, "alias": "vw_price_drops", "schema": "sales_houses_alerts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "sales_houses_alerts", "alias": "vw_price_drops"}, "created_at": 1709473941.4844239, "relation_name": "\"property_cro\".\"analytics_sales_houses_alerts\".\"vw_price_drops\"", "raw_code": "{{ config(materialized='view', schema='sales_houses_alerts', alias='vw_price_drops') }}\n\nselect\n    m1.location,\n    m1.title,\n    m1.link,\n    m1.flat_type,\n    m1.floor,\n    m1.size,\n    m1.price,\n    m1.first_price,\n    m1.current_price,\n    m1.num_seen,\n    m1.price_m2,\n    m1.area_price_m2,\n    m1.area_discount,\n    m1.area_sized_price_m2,\n    m1.area_sized_discount,\n    m1.area_aged_sized_price_m2,\n    m1.area_aged_sized_discount,\n    m1.price_drop_pecentage,\n    m1.first_seen,\n    m1.last_seen,\n    m1.ad_id,\n    m1.latest_seen_date,\n    m1.status,\n    m1.days_on_the_market,\n    m1.price_7,\n    m1.price_15,\n    m1.price_30,\n    m1.price_45,\n    m1.price_60,\n    m1.url,\n    m1.location2,\n    m1.street,\n    m1.num_views,\n    m1.building_type,\n    m1.house_type,\n    m1.number_of_floors,\n    m1.year_built,\n    m1.year_last_renovated,\n    m1.total_liveable_area,\n    m1.net_area,\n    m1.number_of_rooms,\n    m1.number_of_parking_spots,\n    m1.balcony_terrace,\n    m1.total_number_of_floors_in_building,\n    m1.furbishment_state,\n    m1.epc_rating,\n    m1.table_data,\n    m1.description,\n    m1.extra_description,\n    m1.seen_time,\n    m1.advertiser\nfrom {{ ref('4mv_enriched_ad_sales_houses')}} as m1\nwhere price <= 200000\n  and price_m2 <= 1750\n  and price_m2 > 300\n  and size < 200\n  and current_price between 0.4 * first_price and 0.99 * first_price\n  and (year_built is null or year_built > 2003)\n  and (year_last_renovated is null or year_last_renovated > 2000)\n--     and number_of_floors not in ('Prizemnica','Visoka prizemnica')\n--     and total_number_of_floors_in_building not in ('Prizemnica','Visoka prizemnica')\n  and coalesce(furbishment_state,'') not in ('Za renoviranje','Roh-bau')\n  and lower(description) not like '%roh bau%'\n  and lower(description) not like '%roh-bau%'\n  and location2 not in ('Grad Zagreb, Pe\u0161\u010denica - \u017ditnjak, Kozari put')\n  and m1.price > 1000\n  and m1.first_seen between {{ dbt.current_timestamp() }}::date - INTERVAL '120 DAY' and {{ dbt.current_timestamp() }}::date\n  and m1.status = 'active'\n--     and (\n--         (lower(advertiser) not like '%nekretnin%' and lower(advertiser) not like '%agencij%'\n--              and lower(advertiser) not like '%real estate%' and lower(advertiser) not like '%d.o.o.%'\n--              and lower(advertiser) not like '%d.d.%'\n--           and lower(advertiser) not in ('opereta', 'eurovilla d.o.o.', 'aps', 'b2 kapital d.o.o.', 'stan grad immobilien'))\n--         or lower(title) like '%bez provizije%'\n--         or lower(description) like '%bez provizije%'\n--     )\norder by m1.first_seen desc", "language": "sql", "refs": [{"name": "4mv_enriched_ad_sales_houses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"], "nodes": ["model.property_cro.4mv_enriched_ad_sales_houses"]}, "compiled_path": "target/compiled/property_cro/models/sales_houses/alerts/vw_price_drops_alert_sales_houses.sql", "compiled": true, "compiled_code": "\n\nselect\n    m1.location,\n    m1.title,\n    m1.link,\n    m1.flat_type,\n    m1.floor,\n    m1.size,\n    m1.price,\n    m1.first_price,\n    m1.current_price,\n    m1.num_seen,\n    m1.price_m2,\n    m1.area_price_m2,\n    m1.area_discount,\n    m1.area_sized_price_m2,\n    m1.area_sized_discount,\n    m1.area_aged_sized_price_m2,\n    m1.area_aged_sized_discount,\n    m1.price_drop_pecentage,\n    m1.first_seen,\n    m1.last_seen,\n    m1.ad_id,\n    m1.latest_seen_date,\n    m1.status,\n    m1.days_on_the_market,\n    m1.price_7,\n    m1.price_15,\n    m1.price_30,\n    m1.price_45,\n    m1.price_60,\n    m1.url,\n    m1.location2,\n    m1.street,\n    m1.num_views,\n    m1.building_type,\n    m1.house_type,\n    m1.number_of_floors,\n    m1.year_built,\n    m1.year_last_renovated,\n    m1.total_liveable_area,\n    m1.net_area,\n    m1.number_of_rooms,\n    m1.number_of_parking_spots,\n    m1.balcony_terrace,\n    m1.total_number_of_floors_in_building,\n    m1.furbishment_state,\n    m1.epc_rating,\n    m1.table_data,\n    m1.description,\n    m1.extra_description,\n    m1.seen_time,\n    m1.advertiser\nfrom \"property_cro\".\"analytics_sales_houses\".\"mv_enriched_ad\" as m1\nwhere price <= 200000\n  and price_m2 <= 1750\n  and price_m2 > 300\n  and size < 200\n  and current_price between 0.4 * first_price and 0.99 * first_price\n  and (year_built is null or year_built > 2003)\n  and (year_last_renovated is null or year_last_renovated > 2000)\n--     and number_of_floors not in ('Prizemnica','Visoka prizemnica')\n--     and total_number_of_floors_in_building not in ('Prizemnica','Visoka prizemnica')\n  and coalesce(furbishment_state,'') not in ('Za renoviranje','Roh-bau')\n  and lower(description) not like '%roh bau%'\n  and lower(description) not like '%roh-bau%'\n  and location2 not in ('Grad Zagreb, Pe\u0161\u010denica - \u017ditnjak, Kozari put')\n  and m1.price > 1000\n  and m1.first_seen between now()::date - INTERVAL '120 DAY' and now()::date\n  and m1.status = 'active'\n--     and (\n--         (lower(advertiser) not like '%nekretnin%' and lower(advertiser) not like '%agencij%'\n--              and lower(advertiser) not like '%real estate%' and lower(advertiser) not like '%d.o.o.%'\n--              and lower(advertiser) not like '%d.d.%'\n--           and lower(advertiser) not in ('opereta', 'eurovilla d.o.o.', 'aps', 'b2 kapital d.o.o.', 'stan grad immobilien'))\n--         or lower(title) like '%bez provizije%'\n--         or lower(description) like '%bez provizije%'\n--     )\norder by m1.first_seen desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}}, "sources": {"source.property_cro.staging.rental_flat_desc": {"database": "property_cro", "schema": "staging", "name": "rental_flat_desc", "resource_type": "source", "package_name": "property_cro", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.property_cro.staging.rental_flat_desc", "fqn": ["property_cro", "staging", "rental_flat_desc"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "rental_flat_desc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "seen_time", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"property_cro\".\"staging\".\"rental_flat_desc\"", "created_at": 1709473941.5604138}, "source.property_cro.staging.rentals_flats": {"database": "property_cro", "schema": "staging", "name": "rentals_flats", "resource_type": "source", "package_name": "property_cro", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.property_cro.staging.rentals_flats", "fqn": ["property_cro", "staging", "rentals_flats"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "rentals_flats", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "seen_time", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"property_cro\".\"staging\".\"rentals_flats\"", "created_at": 1709473941.5605571}, "source.property_cro.staging.sale_flat_desc": {"database": "property_cro", "schema": "staging", "name": "sale_flat_desc", "resource_type": "source", "package_name": "property_cro", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.property_cro.staging.sale_flat_desc", "fqn": ["property_cro", "staging", "sale_flat_desc"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "sale_flat_desc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "seen_time", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"property_cro\".\"staging\".\"sale_flat_desc\"", "created_at": 1709473941.5606568}, "source.property_cro.staging.sale_house_desc": {"database": "property_cro", "schema": "staging", "name": "sale_house_desc", "resource_type": "source", "package_name": "property_cro", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.property_cro.staging.sale_house_desc", "fqn": ["property_cro", "staging", "sale_house_desc"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "sale_house_desc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "seen_time", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"property_cro\".\"staging\".\"sale_house_desc\"", "created_at": 1709473941.56075}, "source.property_cro.staging.sales_flats": {"database": "property_cro", "schema": "staging", "name": "sales_flats", "resource_type": "source", "package_name": "property_cro", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.property_cro.staging.sales_flats", "fqn": ["property_cro", "staging", "sales_flats"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "sales_flats", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "seen_time", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"property_cro\".\"staging\".\"sales_flats\"", "created_at": 1709473941.560839}, "source.property_cro.staging.sales_houses": {"database": "property_cro", "schema": "staging", "name": "sales_houses", "resource_type": "source", "package_name": "property_cro", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.property_cro.staging.sales_houses", "fqn": ["property_cro", "staging", "sales_houses"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "sales_houses", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "seen_time", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"property_cro\".\"staging\".\"sales_houses\"", "created_at": 1709473941.561051}, "source.property_cro.generated.ad_price_history_agg_api": {"database": "property_cro", "schema": "public", "name": "ad_price_history_agg_api", "resource_type": "source", "package_name": "property_cro", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.property_cro.generated.ad_price_history_agg_api", "fqn": ["property_cro", "generated", "ad_price_history_agg_api"], "source_name": "generated", "source_description": "", "loader": "", "identifier": "ad_price_history_agg_api", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "created_at", "freshness": {"warn_after": {"count": 26, "period": "hour"}, "error_after": {"count": 36, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"property_cro\".\"public\".\"ad_price_history_agg_api\"", "created_at": 1709473941.561149}}, "macros": {"macro.property_cro.inventory_per_general_location_macro": {"name": "inventory_per_general_location_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/inventory_per_general_location_macro.sql", "original_file_path": "macros/inventory_per_general_location_macro.sql", "unique_id": "macro.property_cro.inventory_per_general_location_macro", "macro_sql": "{% macro inventory_per_general_location_macro(mat_view, source_schema, source_table, price_history_view) %}\n\nwith zg_loc as (\n    select distinct location from {{ ref(mat_view) }}\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select quarter,\n           substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n           count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n           round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n           round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n           round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n           round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from {{ ref(mat_view) }} s\n    join {{ref ('mv_date_to_quarter_mapping') }} d on first_seen = date_\n    where location in (select location from zg_loc)\n    group by d.quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n), sold_ads as (\n    select\n        quarter,\n        substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from {{ ref(mat_view) }} s\n    join {{ref ('mv_date_to_quarter_mapping') }} d\n        on s.first_seen = d.date_\n    where status = 'inactive'\n        and location in (select location from zg_loc)\n    group by d.quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n), actives as (\n    select\n        d.quarter,\n        substring(s.location FROM 1 FOR position(',' IN s.location) - 1) as location,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from {{ source(source_schema, source_table) }} s\n    join {{ ref(price_history_view) }} as hist2\n        on s.ad_id = hist2.ad_id\n    join {{ref ('mv_date_to_quarter_mapping') }} d\n        on seen_date = date_\n    where s.location in (select location from zg_loc)\n    group by quarter, substring(s.location FROM 1 FOR position(',' IN s.location) - 1)\n)\nselect\n    a.quarter as year_month,\n    a.location,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\njoin sold_ads r on n.quarter = r.quarter and n.location = r.location\njoin actives a on n.quarter = a.quarter and n.location = a.location\norder by n.quarter desc\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.5987258, "supported_languages": null}, "macro.property_cro.date_to_quarter_mapping_macro": {"name": "date_to_quarter_mapping_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/mv_date_to_quarter_mapping.sql", "original_file_path": "macros/mv_date_to_quarter_mapping.sql", "unique_id": "macro.property_cro.date_to_quarter_mapping_macro", "macro_sql": "{% macro date_to_quarter_mapping_macro() %}\n\n{% if \"duckdb\" in target.name %}\n\nwith quarterly as (\n    SELECT current_date - interval (91 * generate_series) day AS quarter\n    FROM generate_series(0, 50)\n), daily as (\n    select current_date - interval (generate_series) day AS date_\n    from generate_series(0,4550)\n), joined as (\n    select\n        date_, quarter, extract('day' from date_ - quarter),\n        ROW_NUMBER() OVER (PARTITION BY date_ ORDER BY extract('day' from date_ - quarter) desc) as rn\n    from quarterly q\n             join daily d on q.quarter > d.date_\n)\nselect date_, quarter, *\nfrom joined\nwhere rn = 1\n\n    {% elif \"postgres\" in target.name %}\n\nwith quarterly as (\n    SELECT current_date - 91 * sequence.day AS quarter\n    FROM generate_series(0, 50) AS sequence(day)\n), daily as (\n    select current_date - sequence.day AS date_\n    from generate_series(0,4550) AS sequence(day)\n), joined as (\n    select\n        date_, quarter,\n        ROW_NUMBER() OVER (PARTITION BY date_ ORDER BY abs(date_ - quarter)) as rn\n    from quarterly q\n             join daily d\n                  on q.quarter > d.date_\n)\nselect date_, quarter\nfrom joined\nwhere rn = 1\n\n\n{%- else -%} invalid_database\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.599371, "supported_languages": null}, "macro.property_cro.update_target_table_from_source": {"name": "update_target_table_from_source", "resource_type": "macro", "package_name": "property_cro", "path": "macros/reload_table.sql", "original_file_path": "macros/reload_table.sql", "unique_id": "macro.property_cro.update_target_table_from_source", "macro_sql": "{% macro update_target_table_from_source(source_table, target_table) %}\n\n  {% set query %}\n    create table if not exists {{target_table}} as select * from {{source_table}} where 0 = 1;\n    delete from {{target_table}}; \n    insert into {{target_table}} select * from {{source_table}};\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.59989, "supported_languages": null}, "macro.property_cro.inventory_per_location_macro": {"name": "inventory_per_location_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/inventory_per_location_macro.sql", "original_file_path": "macros/inventory_per_location_macro.sql", "unique_id": "macro.property_cro.inventory_per_location_macro", "macro_sql": "{% macro inventory_per_location_macro(mat_view, source_schema, source_table, price_history_view) %}\n\nwith zg_loc as (\n    select distinct location from {{ ref(mat_view) }}\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select quarter,\n           s.location,\n           count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n           round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n           round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n           round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n           round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from {{ ref(mat_view) }} s\n    join {{ref ('mv_date_to_quarter_mapping') }} d on first_seen = date_\n    where location in (select location from zg_loc)\n    group by d.quarter, s.location\n), sold_ads as (\n    select\n        quarter,\n        s.location,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from {{ ref(mat_view) }} s\n    join {{ref ('mv_date_to_quarter_mapping') }} d\n        on s.first_seen = d.date_\n    where status = 'inactive'\n        and location in (select location from zg_loc)\n    group by d.quarter, s.location\n), actives as (\n    select\n        d.quarter,\n        s.location,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from {{ source(source_schema, source_table) }} s\n    join {{ ref(price_history_view) }} as hist2\n        on s.ad_id = hist2.ad_id\n    join {{ref ('mv_date_to_quarter_mapping') }} d\n        on seen_date = date_\n    where s.location in (select location from zg_loc)\n    group by quarter, s.location\n)\nselect\n    a.quarter as year_month,\n    a.location,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\njoin sold_ads r on n.quarter = r.quarter and n.location = r.location\njoin actives a on n.quarter = a.quarter and n.location = a.location\norder by n.quarter desc\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.601801, "supported_languages": null}, "macro.property_cro.avg_px_per_loc_and_size_and_age_macro": {"name": "avg_px_per_loc_and_size_and_age_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/avg_px_per_loc_and_size_and_age_macro.sql", "original_file_path": "macros/avg_px_per_loc_and_size_and_age_macro.sql", "unique_id": "macro.property_cro.avg_px_per_loc_and_size_and_age_macro", "macro_sql": "{% macro avg_px_per_loc_and_size_and_age_macro(ref_name, source_schema, source_table, lookback_days, min_price, max_price_m2) %}\n\nselect distinct\n\tlocation,\n    FLOOR(year_built / 20) * 20 as year_range,\n    FLOOR(size / 20) * 20 as size,\n\tcount(distinct vh.ad_id) area_total_ads,\n\tavg(price/size) as area_average\nfrom {{ ref(ref_name) }} vh\njoin {{ source(source_schema, source_table) }} sd on vh.ad_id = sd.ad_id\nWHERE last_seen >=  {{ dbt.current_timestamp() }}::date - INTERVAL '{{lookback_days}}'\n    and year_built is not null and size is not null\n    and price > {{min_price}}\ngroup by location, FLOOR(year_built / 20), FLOOR(size / 20)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.602368, "supported_languages": null}, "macro.property_cro.last_ad_time_macro": {"name": "last_ad_time_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/last_ad_time_macro.sql", "original_file_path": "macros/last_ad_time_macro.sql", "unique_id": "macro.property_cro.last_ad_time_macro", "macro_sql": "{% macro last_ad_time_macro(source_schema, source_table) %}\n\nselect\n    ad_id,\n    min(seen_date) as first_seen,\n    max(seen_date) as last_seen,\n    case\n        when max(seen_date) < {{ dbt.current_timestamp() }}::date - INTERVAL '4 DAY'\n            then 'inactive'\n        else 'active'\n    end as status,\n    max(seen_date) - min(seen_date) as days_on_the_market\nfrom {{ source(source_schema, source_table) }}\ngroup by ad_id\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.602725, "supported_languages": null}, "macro.property_cro.avg_px_per_loc_and_size_macro": {"name": "avg_px_per_loc_and_size_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/avg_px_per_loc_and_size_macro.sql", "original_file_path": "macros/avg_px_per_loc_and_size_macro.sql", "unique_id": "macro.property_cro.avg_px_per_loc_and_size_macro", "macro_sql": "{% macro avg_px_per_loc_and_size_macro(ref_name, lookback_days, min_price) %}\n\nselect distinct \n\tlocation,\n    FLOOR(size / 20) * 20 as size,\n\tcount(distinct ad_id) area_total_ads,\n\tavg(price/size) as area_average\nfrom {{ ref(ref_name) }}\nWHERE last_seen >  {{ dbt.current_timestamp() }}::date - INTERVAL '{{lookback_days}}'\n    and price > {{min_price}}\ngroup by location, FLOOR(size / 20)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.603115, "supported_languages": null}, "macro.property_cro.inventory_macro": {"name": "inventory_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/inventory_macro.sql", "original_file_path": "macros/inventory_macro.sql", "unique_id": "macro.property_cro.inventory_macro", "macro_sql": "{% macro inventory_macro(mat_view, source_schema, source_table, price_history_view) %}\n\nwith zg_loc as (\n    select distinct location from {{ ref(mat_view) }}\n    where location2 like 'Grad Zagreb,%' or location2 like 'Zagreba\u010dka,%'\n),\nnew_ads as (\n    select\n        date_trunc('month', first_seen) as year_month,\n        count(distinct ad_id) filter (where price_m2 < 10000) as new_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as new_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as new_ads_avg_size\n    from {{ ref(mat_view) }}\n    where location in (select location from zg_loc)\n    group by date_trunc('month', first_seen)\n), sold_ads as (\n    select\n        date_trunc('month', last_seen) as year_month,\n        count(distinct ad_id) filter (where price_m2 < 10000) as sold_ads_qty,\n        round((avg(days_on_the_market) filter (where price_m2 < 10000))::numeric,1) as sold_ads_dom,\n        round((avg(price_m2) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px_m2,\n        round((avg(price) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_px,\n        round((avg(size) filter (where price_m2 < 10000))::numeric,1) as sold_ads_avg_size\n    from {{ ref(mat_view) }}\n    where status = 'inactive' and location in (select location from zg_loc)\n    group by date_trunc('month', last_seen)\n), actives as (\n    select\n        date_trunc('month', seen_date) as year_month,\n        count(distinct s.ad_id) filter (where s.price < 10000000) as active_ads_qty,\n        round((avg(days_on_the_market) filter (where s.price < 10000000))::numeric,1) as active_ads_dom,\n        round((avg(s.price/s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px_m2,\n        round((avg(s.price) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_px,\n        round((avg(s.size) filter (where s.price < 10000000))::numeric,1) as active_ads_avg_size\n    from {{ source(source_schema, source_table) }} s\n    join {{ ref(price_history_view) }} as hist2\n    on s.ad_id = hist2.ad_id\n    where s.location in (select location from zg_loc)\n    group by date_trunc('month', seen_date)\n)\nselect\n    n.year_month,\n    new_ads_qty,\n    new_ads_dom,\n    new_ads_avg_px_m2,\n    new_ads_avg_px,\n    new_ads_avg_size,\n    sold_ads_qty,\n    sold_ads_dom,\n    sold_ads_avg_px_m2,\n    sold_ads_avg_px,\n    sold_ads_avg_size,\n    active_ads_qty,\n    active_ads_dom,\n    active_ads_avg_px_m2,\n    active_ads_avg_px,\n    active_ads_avg_size\nfrom new_ads n\n         join sold_ads r on n.year_month = r.year_month\n         join actives a on n.year_month = a.year_month\norder by n.year_month desc\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.604465, "supported_languages": null}, "macro.property_cro.price_history_macro": {"name": "price_history_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/price_history_macro.sql", "original_file_path": "macros/price_history_macro.sql", "unique_id": "macro.property_cro.price_history_macro", "macro_sql": "{% macro price_history_macro(source_schema, source_table, ref_name, source_min_price, source_max_price, source_min_price_m2, source_max_price_m2) %}\n\nwith t as (\n    select\n\t\tlas.ad_id,\n        t.last_seen,\n        t.first_seen,\n        price,\n        seen_date,\n        t.days_on_the_market,\n        t.status,\n        first_value(price) over (partition by las.ad_id order by seen_date desc range between UNBOUNDED preceding and unbounded following) as current_price,\n\t\tlast_value(price) over (partition by las.ad_id order by seen_date desc range between UNBOUNDED preceding and unbounded following) as first_price\n\tfrom {{ source(source_schema, source_table) }} las\n    join {{ ref(ref_name) }} as t\n        on las.ad_id = t.ad_id\n    where las.price between {{source_min_price}} and {{source_max_price}}\n),\nad_price_history as (\n    select\n        ad_id,\n        last_seen,\n        first_seen,\n        current_price,\n        first_price,\n        days_on_the_market,\n        status,\n        min(price) filter ( where seen_date <= t.last_seen - interval '60 day') as price_60,\n        min(price) filter ( where seen_date between t.last_seen - interval '60 day' and t.last_seen - interval '45 day') as price_45,\n        min(price) filter ( where seen_date between t.last_seen - interval '45 day' and t.last_seen - interval '30 day') as price_30,\n        min(price) filter ( where seen_date between t.last_seen - interval '30 day' and t.last_seen - interval '15 day') as price_15,\n        min(price) filter ( where seen_date between t.last_seen - interval '15 day' and t.last_seen - interval '7 day') as price_7,\n        min(price) filter ( where seen_date between t.last_seen - interval '7 day' and t.last_seen - interval '3 day') as price_3,\n        count(ad_id) as num_seen,\n        max(seen_date) as latest_seen_date\n    from t\n    group by ad_id, last_seen, first_seen, current_price, first_price, days_on_the_market, status\n), last_ad as (\n    select\n        ad.ad_id,\n        ad.seen_date,\n        ad.location,\n        ad.title,\n        ad.link,\n        ad.flat_type,\n        ad.floor,\n        ad.size,\n        ad.price\n    from (select row_number() over (partition by ad_id order by seen_time desc) as rown,\n                 *\n          from {{ source(source_schema, source_table) }}) ad\n    where rown = 1\n)\nselect\n    ad.location,\n    ad.title,\n    ad.link,\n    ad.flat_type,\n    ad.floor,\n    ad.size,\n    ad.price,\n    aph.ad_id,\n    aph.last_seen,\n    aph.first_seen,\n    aph.current_price,\n    aph.first_price,\n    aph.price_60,\n    aph.price_45,\n    aph.price_30,\n    aph.price_15,\n    aph.price_7,\n    aph.price_3,\n    aph.num_seen,\n    aph.latest_seen_date,\n    aph.days_on_the_market,\n    aph.status\nfrom ad_price_history aph\njoin last_ad ad\n\ton aph.ad_id = ad.ad_id\n\tand aph.last_seen = ad.seen_date\nwhere (ad.price/ad.size) between {{source_min_price_m2}} and {{source_max_price_m2}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6060889, "supported_languages": null}, "macro.property_cro.enriched_ads_base_col_select_macro": {"name": "enriched_ads_base_col_select_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/enriched_ads_base_col_select_macro.sql", "original_file_path": "macros/enriched_ads_base_col_select_macro.sql", "unique_id": "macro.property_cro.enriched_ads_base_col_select_macro", "macro_sql": "{% macro enriched_ads_base_col_select_macro(round_digits) %}\n    s.location,\n    s.title,\n    s.link,\n    s.flat_type,\n    s.floor,\n    s.size,\n    s.price,\n    s.first_price,\n    s.current_price,\n    s.num_seen,\n    round((s.price/s.size)::numeric, {{round_digits}}) as price_m2,\n    round(a.area_average::numeric, {{round_digits}}) as area_price_m2,\n    round((100 * (a.area_average - s.price/s.size) / a.area_average)::numeric, 1) as area_discount,\n    round(a2.area_average::numeric, {{round_digits}}) as area_sized_price_m2,\n    round((100 * (a2.area_average - s.price/s.size) / a2.area_average)::numeric, 1) as area_sized_discount,\n    round(a3.area_average::numeric, {{round_digits}}) as area_aged_sized_price_m2,\n    round((100 * (a3.area_average - s.price/s.size) / a3.area_average)::numeric, 1)  as area_aged_sized_discount,\n    round(((s.first_price - s.price)/s.first_price * 100)::numeric, 1)  as price_drop_pecentage,\n    s.first_seen,\n    s.last_seen,\n    s.ad_id,\n    s.latest_seen_date,\n    s.status,\n    s.days_on_the_market,\n    s.price_3,\n    s.price_7,\n    s.price_15,\n    s.price_30,\n    s.price_45,\n    s.price_60,\n    sd.url,\n    sd.location2,\n    sd.street,\n    sd.num_views,\n    sd.advertiser,\n    sd.number_of_floors,\n    sd.year_built,\n    sd.year_last_renovated,\n    sd.total_liveable_area,\n    sd.net_area,\n    sd.number_of_rooms,\n    sd.number_of_parking_spots,\n    sd.balcony_terrace,\n    case when RIGHT(sd.floor, 1) like '.'\n        then SUBSTR(sd.floor, 1, LENGTH(sd.floor)-1)\n        else sd.floor\n    end as floor_desc,\n    sd.furbishment_state,\n    sd.epc_rating,\n    sd.table_data,\n    sd.description,\n    sd.extra_description,\n    sd.seen_time,\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6069288, "supported_languages": null}, "macro.property_cro.avg_px_per_loc_macro": {"name": "avg_px_per_loc_macro", "resource_type": "macro", "package_name": "property_cro", "path": "macros/avg_px_per_loc_macro.sql", "original_file_path": "macros/avg_px_per_loc_macro.sql", "unique_id": "macro.property_cro.avg_px_per_loc_macro", "macro_sql": "{% macro avg_px_per_loc_macro(ref_name, lookback_days, min_price) %}\n\nselect distinct\n\tlocation,\n\tcount(ad_id) over (partition by location) as area_total_ads,\n\tavg(price/size) over (partition by location) as area_average\nfrom {{ ref(ref_name) }}\nwhere last_seen > {{ dbt.current_timestamp() }}::date - INTERVAL '{{lookback_days}}'\n    and price > {{min_price}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6073081, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.60767, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.608, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.608175, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.608316, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.608455, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.610534, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.610987, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.611802, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.611962, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6231492, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6238809, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.624293, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.624686, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.62531, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.62588, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.626097, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.626519, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.626994, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.628048, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.628289, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.628691, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.629025, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.629545, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.629819, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.630544, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.630795, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.630933, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.63115, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6313229, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6318111, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6326962, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.632877, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.633355, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.633526, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6337311, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6347818, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }};\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.63536, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.635714, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6361542, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.636319, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.637162, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.637374, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6375418, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.638217, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.638426, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6386828, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.639439, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.643772, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.643998, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.64463, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.645149, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.646484, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6467268, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6469052, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6470761, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6472452, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.647705, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6480699, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.648438, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.648972, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6493068, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6537752, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.653981, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6542442, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6551208, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.655319, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6555269, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6572402, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.658973, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6640582, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.664405, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.664612, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.664721, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.664895, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6650372, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.665285, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6664162, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6666439, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.666952, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.667472, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6750238, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.678547, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.679146, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.679521, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.679989, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.680446, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.68651, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6871302, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6874728, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6891332, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.68943, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.690293, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.693942, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.697462, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.6995, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.700168, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.700983, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7012732, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.702142, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.710155, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.712138, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7124622, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.713691, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7140422, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.714836, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.715611, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.716705, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.716993, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.717217, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7175748, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7178829, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7182488, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7184799, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7188008, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7190259, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7192068, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.719539, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.725853, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.732793, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.734287, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.735745, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7367969, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.737098, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.737241, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.737602, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7377632, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.742361, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7463691, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.75255, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.753675, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.753982, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.754612, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7548501, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.755009, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.755182, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.755326, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.755518, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.755658, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.756226, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.756445, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7579908, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.758521, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.758983, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7596118, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.759923, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.760266, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.760742, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.761046, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.761905, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.762371, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.762593, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.762836, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.763076, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.764035, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7655911, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.766057, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.766379, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.766765, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.767019, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7679949, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.768544, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.768796, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.769144, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7695842, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7699142, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.770483, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.771023, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.771426, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7718048, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.772567, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.772722, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7730691, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.773254, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7738812, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7741802, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.774539, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7747462, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7756958, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.775965, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.776343, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7765272, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.777009, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.777214, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7786272, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7787929, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.779543, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.779776, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.779948, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.781632, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7821078, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.782529, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.782881, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.783009, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.783336, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.783511, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.783846, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.784024, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7850728, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.785303, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.785835, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.786756, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7873201, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7875478, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.787766, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.788094, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7882261, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.789276, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.789454, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.790986, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.791243, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.791522, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.791861, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.792035, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7925398, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.792741, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.792964, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.7934878, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.793919, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.794278, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.794577, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.795271, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.797181, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.797885, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.798238, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.800473, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.802231, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.803189, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8035252, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.803863, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.803966, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.804888, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.805621, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.805904, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8063529, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.806756, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.806954, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.807251, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.807405, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.808414, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.808924, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.809155, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.809789, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.810102, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8102322, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.810695, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8109891, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.811324, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.811538, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.811966, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8121521, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8126001, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.812782, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.813576, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8140612, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.814472, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.814671, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.815022, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.815191, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8155022, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.815697, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8159978, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.816191, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.816492, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8166242, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8169768, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.817141, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.817434, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.817645, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.818787, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.818974, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.819169, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.819353, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.819551, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8197298, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.819927, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8201442, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.820344, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8205261, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.820767, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.821053, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.821271, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.821453, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.821803, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.821965, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.822264, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.822392, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8228889, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.82322, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8234, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.824042, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.824246, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.824517, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.824851, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8250098, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.825463, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.825755, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.826093, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.826252, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.826705, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8269281, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8271239, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.827348, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.827935, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.828119, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.82829, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8284202, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.828703, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.828795, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.828994, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.829192, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.830206, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.83037, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.83056, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.831199, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8314922, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8316789, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.831878, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.832036, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.834481, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.834687, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.83497, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.835336, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.83564, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.836117, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8363478, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.836834, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.83714, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8378198, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.838104, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8382778, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.838794, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.839299, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.839641, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.839914, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8421938, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.842358, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.842593, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.842741, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.84319, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8434272, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.843563, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.843851, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.844139, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8444328, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8728588, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.873225, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.874082, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.874329, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.874636, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.874923, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8763342, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.877013, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.877247, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.877418, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.878248, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.878456, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.878701, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.878907, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.879238, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.879906, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.883407, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8837278, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8839731, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8842938, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8845189, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8847091, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8849258, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8852181, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.885466, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.885845, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.886073, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.886272, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.886477, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.886671, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.886931, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.887157, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.889975, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.890261, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.890681, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8909829, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.891249, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.891474, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.892956, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.893402, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8936489, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.894081, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.894366, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.895091, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.895401, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.8963342, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.898379, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.898567, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.899644, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9002292, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.900938, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.901526, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.901616, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9022331, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9025111, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.902857, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.90319, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.903626, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.904199, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.904791, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.905588, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.905974, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9063628, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.907816, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.909139, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9102, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9115121, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9123352, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.912749, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9136372, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.914657, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.915264, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.915869, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.916672, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9172852, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.91798, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.918452, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.919275, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.920248, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9210188, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.921891, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9225862, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.923008, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9235232, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.92396, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9247518, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.925757, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.92688, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.927985, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.928894, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.929965, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.930593, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.930955, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9353049, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.937271, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.93761, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.93781, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.938348, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.938688, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.938934, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9392462, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9394581, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9402041, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.941209, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.942079, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9427898, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.943074, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.943521, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.943989, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.944643, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9450219, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.945438, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.946284, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.947393, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.94842, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.94892, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.949151, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.949779, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.95061, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.951634, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9521291, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9524748, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.954016, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9557881, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.957438, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9593768, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9597352, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9599009, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.964064, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.968417, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.968811, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.969126, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.970075, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.970339, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9705951, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9708319, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.971116, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9713721, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9718919, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.972206, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.972679, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9733682, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.973786, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9742012, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9763, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.976768, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.977773, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9784079, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9798038, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.981674, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.982985, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9840052, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.984579, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.985455, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.986409, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.986968, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.987202, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.987701, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.988429, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.988988, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.989752, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.990408, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.990581, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.990748, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.990913, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.991553, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.9925299, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.993851, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.99419, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.994876, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709473940.995899, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.property_cro.3vw_avg_ask_px_per_loc_size_sales_flats": ["model.property_cro.2mv_price_history_sales_flats"], "model.property_cro.2mv_price_history_sales_flats": ["model.property_cro.1vw_last_ad_time_sales_flats", "source.property_cro.staging.sales_flats"], "model.property_cro.4mv_enriched_ad_sales_flats": ["model.property_cro.2mv_price_history_sales_flats", "model.property_cro.3vw_avg_ask_px_per_loc_sales_flats", "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_flats", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_flats", "source.property_cro.staging.sale_flat_desc"], "model.property_cro.1vw_last_ad_time_sales_flats": ["source.property_cro.staging.sales_flats"], "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_flats": ["model.property_cro.2mv_price_history_sales_flats", "source.property_cro.staging.sale_flat_desc"], "model.property_cro.3vw_avg_ask_px_per_loc_sales_flats": ["model.property_cro.2mv_price_history_sales_flats"], "model.property_cro.mv_inventory_general_location_sales_flats": ["model.property_cro.2mv_price_history_sales_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.mv_date_to_quarter_mapping", "source.property_cro.staging.sales_flats"], "model.property_cro.mv_inventory_location_sales_flats": ["model.property_cro.2mv_price_history_sales_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.mv_date_to_quarter_mapping", "source.property_cro.staging.sales_flats"], "model.property_cro.mv_inventory_sales_flats": ["model.property_cro.2mv_price_history_sales_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "source.property_cro.staging.sales_flats"], "model.property_cro.vw_best_streets_in_zagreb": ["model.property_cro.4mv_enriched_ad_sales_flats"], "model.property_cro.vw_price_drops_alert_sales_flats": ["model.property_cro.4mv_enriched_ad_sales_flats"], "model.property_cro.vw_modern_central_alert_sales_flats": ["model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.zagreb_locations"], "model.property_cro.vw_best_new_or_reduced_alert_sales_flats": ["model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.zagreb_locations"], "model.property_cro.vw_new_ads_alert_sales_flats": ["model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.zagreb_locations"], "model.property_cro.vw_large_price_drops_alert_sales_flats": ["model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.zagreb_locations"], "model.property_cro.3vw_avg_ask_px_per_loc_rentals_flats": ["model.property_cro.2mv_price_history_rentals_flats"], "model.property_cro.4mv_enriched_ad_rentals_flats": ["model.property_cro.2mv_price_history_rentals_flats", "model.property_cro.3vw_avg_ask_px_per_loc_rentals_flats", "model.property_cro.3vw_avg_ask_px_per_loc_size_rentals_flats", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_rentals_flats", "source.property_cro.staging.rental_flat_desc"], "model.property_cro.3vw_avg_ask_px_per_loc_year_size_rentals_flats": ["model.property_cro.2mv_price_history_rentals_flats", "source.property_cro.staging.rental_flat_desc"], "model.property_cro.2mv_price_history_rentals_flats": ["model.property_cro.1vw_last_ad_time_rentals_flats", "source.property_cro.staging.rentals_flats"], "model.property_cro.1vw_last_ad_time_rentals_flats": ["source.property_cro.staging.rentals_flats"], "model.property_cro.3vw_avg_ask_px_per_loc_size_rentals_flats": ["model.property_cro.2mv_price_history_rentals_flats"], "model.property_cro.mv_inventory_rentals_flats": ["model.property_cro.2mv_price_history_rentals_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "source.property_cro.staging.rentals_flats"], "model.property_cro.mv_inventory_general_location_rentals_flats": ["model.property_cro.2mv_price_history_rentals_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.mv_date_to_quarter_mapping", "source.property_cro.staging.rentals_flats"], "model.property_cro.mv_inventory_location_rentals_flats": ["model.property_cro.2mv_price_history_rentals_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.mv_date_to_quarter_mapping", "source.property_cro.staging.rentals_flats"], "model.property_cro.mv_date_to_quarter_mapping": [], "model.property_cro.ad_price_history_agg": ["model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.4mv_enriched_ad_sales_houses", "model.property_cro.ad_price_history"], "model.property_cro.ad_price_history": ["source.property_cro.staging.rentals_flats", "source.property_cro.staging.sales_flats", "source.property_cro.staging.sales_houses"], "model.property_cro.price_changes_per_week": ["model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.4mv_enriched_ad_sales_houses", "model.property_cro.ad_price_history"], "model.property_cro.zagreb_locations": [], "model.property_cro.2mv_price_history_sales_houses": ["model.property_cro.1vw_last_ad_time_sales_houses", "source.property_cro.staging.sales_houses"], "model.property_cro.4mv_enriched_ad_sales_houses": ["model.property_cro.2mv_price_history_sales_houses", "model.property_cro.3vw_avg_ask_px_per_loc_sales_houses", "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_houses", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_houses", "source.property_cro.staging.sale_house_desc"], "model.property_cro.1vw_last_ad_time_sales_houses": ["source.property_cro.staging.sales_houses"], "model.property_cro.3vw_avg_ask_px_per_loc_sales_houses": ["model.property_cro.2mv_price_history_sales_houses"], "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_houses": ["model.property_cro.2mv_price_history_sales_houses", "source.property_cro.staging.sale_house_desc"], "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_houses": ["model.property_cro.2mv_price_history_sales_houses"], "model.property_cro.mv_inventory_location_sales_houses": ["model.property_cro.2mv_price_history_sales_houses", "model.property_cro.4mv_enriched_ad_sales_houses", "model.property_cro.mv_date_to_quarter_mapping", "source.property_cro.staging.sales_houses"], "model.property_cro.mv_inventory_sales_houses": ["model.property_cro.2mv_price_history_sales_houses", "model.property_cro.4mv_enriched_ad_sales_houses", "source.property_cro.staging.sales_houses"], "model.property_cro.mv_inventory_general_location_sales_houses": ["model.property_cro.2mv_price_history_sales_houses", "model.property_cro.4mv_enriched_ad_sales_houses", "model.property_cro.mv_date_to_quarter_mapping", "source.property_cro.staging.sales_houses"], "model.property_cro.vw_new_ads_alert_sales_houses": ["model.property_cro.4mv_enriched_ad_sales_houses"], "model.property_cro.vw_price_drops_alert_sales_houses": ["model.property_cro.4mv_enriched_ad_sales_houses"], "source.property_cro.staging.rental_flat_desc": [], "source.property_cro.staging.rentals_flats": [], "source.property_cro.staging.sale_flat_desc": [], "source.property_cro.staging.sale_house_desc": [], "source.property_cro.staging.sales_flats": [], "source.property_cro.staging.sales_houses": [], "source.property_cro.generated.ad_price_history_agg_api": []}, "child_map": {"model.property_cro.3vw_avg_ask_px_per_loc_size_sales_flats": ["model.property_cro.4mv_enriched_ad_sales_flats"], "model.property_cro.2mv_price_history_sales_flats": ["model.property_cro.3vw_avg_ask_px_per_loc_sales_flats", "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_flats", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_flats", "model.property_cro.4mv_enriched_ad_sales_flats", "model.property_cro.mv_inventory_general_location_sales_flats", "model.property_cro.mv_inventory_location_sales_flats", "model.property_cro.mv_inventory_sales_flats"], "model.property_cro.4mv_enriched_ad_sales_flats": ["model.property_cro.ad_price_history_agg", "model.property_cro.mv_inventory_general_location_sales_flats", "model.property_cro.mv_inventory_location_sales_flats", "model.property_cro.mv_inventory_sales_flats", "model.property_cro.price_changes_per_week", "model.property_cro.vw_best_new_or_reduced_alert_sales_flats", "model.property_cro.vw_best_streets_in_zagreb", "model.property_cro.vw_large_price_drops_alert_sales_flats", "model.property_cro.vw_modern_central_alert_sales_flats", "model.property_cro.vw_new_ads_alert_sales_flats", "model.property_cro.vw_price_drops_alert_sales_flats"], "model.property_cro.1vw_last_ad_time_sales_flats": ["model.property_cro.2mv_price_history_sales_flats"], "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_flats": ["model.property_cro.4mv_enriched_ad_sales_flats"], "model.property_cro.3vw_avg_ask_px_per_loc_sales_flats": ["model.property_cro.4mv_enriched_ad_sales_flats"], "model.property_cro.mv_inventory_general_location_sales_flats": [], "model.property_cro.mv_inventory_location_sales_flats": [], "model.property_cro.mv_inventory_sales_flats": [], "model.property_cro.vw_best_streets_in_zagreb": [], "model.property_cro.vw_price_drops_alert_sales_flats": [], "model.property_cro.vw_modern_central_alert_sales_flats": [], "model.property_cro.vw_best_new_or_reduced_alert_sales_flats": [], "model.property_cro.vw_new_ads_alert_sales_flats": [], "model.property_cro.vw_large_price_drops_alert_sales_flats": [], "model.property_cro.3vw_avg_ask_px_per_loc_rentals_flats": ["model.property_cro.4mv_enriched_ad_rentals_flats"], "model.property_cro.4mv_enriched_ad_rentals_flats": ["model.property_cro.ad_price_history_agg", "model.property_cro.mv_inventory_general_location_rentals_flats", "model.property_cro.mv_inventory_location_rentals_flats", "model.property_cro.mv_inventory_rentals_flats", "model.property_cro.price_changes_per_week"], "model.property_cro.3vw_avg_ask_px_per_loc_year_size_rentals_flats": ["model.property_cro.4mv_enriched_ad_rentals_flats"], "model.property_cro.2mv_price_history_rentals_flats": ["model.property_cro.3vw_avg_ask_px_per_loc_rentals_flats", "model.property_cro.3vw_avg_ask_px_per_loc_size_rentals_flats", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_rentals_flats", "model.property_cro.4mv_enriched_ad_rentals_flats", "model.property_cro.mv_inventory_general_location_rentals_flats", "model.property_cro.mv_inventory_location_rentals_flats", "model.property_cro.mv_inventory_rentals_flats"], "model.property_cro.1vw_last_ad_time_rentals_flats": ["model.property_cro.2mv_price_history_rentals_flats"], "model.property_cro.3vw_avg_ask_px_per_loc_size_rentals_flats": ["model.property_cro.4mv_enriched_ad_rentals_flats"], "model.property_cro.mv_inventory_rentals_flats": [], "model.property_cro.mv_inventory_general_location_rentals_flats": [], "model.property_cro.mv_inventory_location_rentals_flats": [], "model.property_cro.mv_date_to_quarter_mapping": ["model.property_cro.mv_inventory_general_location_rentals_flats", "model.property_cro.mv_inventory_general_location_sales_flats", "model.property_cro.mv_inventory_general_location_sales_houses", "model.property_cro.mv_inventory_location_rentals_flats", "model.property_cro.mv_inventory_location_sales_flats", "model.property_cro.mv_inventory_location_sales_houses"], "model.property_cro.ad_price_history_agg": [], "model.property_cro.ad_price_history": ["model.property_cro.ad_price_history_agg", "model.property_cro.price_changes_per_week"], "model.property_cro.price_changes_per_week": [], "model.property_cro.zagreb_locations": ["model.property_cro.vw_best_new_or_reduced_alert_sales_flats", "model.property_cro.vw_large_price_drops_alert_sales_flats", "model.property_cro.vw_modern_central_alert_sales_flats", "model.property_cro.vw_new_ads_alert_sales_flats"], "model.property_cro.2mv_price_history_sales_houses": ["model.property_cro.3vw_avg_ask_px_per_loc_sales_houses", "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_houses", "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_houses", "model.property_cro.4mv_enriched_ad_sales_houses", "model.property_cro.mv_inventory_general_location_sales_houses", "model.property_cro.mv_inventory_location_sales_houses", "model.property_cro.mv_inventory_sales_houses"], "model.property_cro.4mv_enriched_ad_sales_houses": ["model.property_cro.ad_price_history_agg", "model.property_cro.mv_inventory_general_location_sales_houses", "model.property_cro.mv_inventory_location_sales_houses", "model.property_cro.mv_inventory_sales_houses", "model.property_cro.price_changes_per_week", "model.property_cro.vw_new_ads_alert_sales_houses", "model.property_cro.vw_price_drops_alert_sales_houses"], "model.property_cro.1vw_last_ad_time_sales_houses": ["model.property_cro.2mv_price_history_sales_houses"], "model.property_cro.3vw_avg_ask_px_per_loc_sales_houses": ["model.property_cro.4mv_enriched_ad_sales_houses"], "model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_houses": ["model.property_cro.4mv_enriched_ad_sales_houses"], "model.property_cro.3vw_avg_ask_px_per_loc_size_sales_houses": ["model.property_cro.4mv_enriched_ad_sales_houses"], "model.property_cro.mv_inventory_location_sales_houses": [], "model.property_cro.mv_inventory_sales_houses": [], "model.property_cro.mv_inventory_general_location_sales_houses": [], "model.property_cro.vw_new_ads_alert_sales_houses": [], "model.property_cro.vw_price_drops_alert_sales_houses": [], "source.property_cro.staging.rental_flat_desc": ["model.property_cro.3vw_avg_ask_px_per_loc_year_size_rentals_flats", "model.property_cro.4mv_enriched_ad_rentals_flats"], "source.property_cro.staging.rentals_flats": ["model.property_cro.1vw_last_ad_time_rentals_flats", "model.property_cro.2mv_price_history_rentals_flats", "model.property_cro.ad_price_history", "model.property_cro.mv_inventory_general_location_rentals_flats", "model.property_cro.mv_inventory_location_rentals_flats", "model.property_cro.mv_inventory_rentals_flats"], "source.property_cro.staging.sale_flat_desc": ["model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_flats", "model.property_cro.4mv_enriched_ad_sales_flats"], "source.property_cro.staging.sale_house_desc": ["model.property_cro.3vw_avg_ask_px_per_loc_year_size_sales_houses", "model.property_cro.4mv_enriched_ad_sales_houses"], "source.property_cro.staging.sales_flats": ["model.property_cro.1vw_last_ad_time_sales_flats", "model.property_cro.2mv_price_history_sales_flats", "model.property_cro.ad_price_history", "model.property_cro.mv_inventory_general_location_sales_flats", "model.property_cro.mv_inventory_location_sales_flats", "model.property_cro.mv_inventory_sales_flats"], "source.property_cro.staging.sales_houses": ["model.property_cro.1vw_last_ad_time_sales_houses", "model.property_cro.2mv_price_history_sales_houses", "model.property_cro.ad_price_history", "model.property_cro.mv_inventory_general_location_sales_houses", "model.property_cro.mv_inventory_location_sales_houses", "model.property_cro.mv_inventory_sales_houses"], "source.property_cro.generated.ad_price_history_agg_api": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}